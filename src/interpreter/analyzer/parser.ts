/* parser generated by jison 0.3.0 */
/**
 * Returns a Parser implementing JisonParserApi and a Lexer implementing JisonLexerApi.
 */

  import { AST } from '../AST/AST';
  import { Type } from '../TableSymbols/Type';
  // INSTRUCTIONS
  import { VariableDeclaration } from '../Instructions/Declaration';
  import { Assigment } from '../Instructions/Assigment';
  import { Print } from '../Instructions/Print';
  import { Cast } from '../Instructions/Cast';
  import { IF } from '../Instructions/ControlSentences/IF';
  import { For } from '../Instructions/LoopSentences/For';
  import { While } from '../Instructions/LoopSentences/While';
  import { DoWhile } from '../Instructions/LoopSentences/DoWhile';
  import { Switch } from '../Instructions/ControlSentences/Switch';
  import { Case } from '../Instructions/ControlSentences/Case';
  import { Break } from '../Instructions/TransferSentences/Break';
  import { Continue } from '../Instructions/TransferSentences/Continue';
  import { Return } from '../Instructions/TransferSentences/Return';
  import { Function } from '../Instructions/Function';
  import { Callback } from '../Instructions/Callback';
  // EXPRESSIONS
  import { Identifier } from '../Expressions/Identifier';
  import { Primitive } from '../Expressions/Primitive';
  import { TernaryOperator } from '../Expressions/TernaryOperator';
  import { Arithmetic } from '../Expressions/Operations/Arithmetic';
  import { Logic } from '../Expressions/Operations/Logic';
  import { Relational } from '../Expressions/Operations/Relational';
  // natives
  import { ToLower } from '../Expressions/Natives/toLower';
  import { ToUpper } from '../Expressions/Natives/ToUpper';
  import { ToString } from '../Expressions/Natives/ToString';
  import { Truncate } from '../Expressions/Natives/Truncate';
  import { Round } from '../Expressions/Natives/Round';
  import { Typeof } from '../Expressions/Natives/Typeof';
  // SYmbol
  import { Symbol } from '../TableSymbols/Symbol';


import { JisonParser, JisonParserApi, StateType, SymbolsType, TerminalsType, ProductionsType, o } from '@ts-jison/parser';const $V0=[1,15],$V1=[1,16],$V2=[1,17],$V3=[1,19],$V4=[1,20],$V5=[1,21],$V6=[1,22],$V7=[1,23],$V8=[1,24],$V9=[1,25],$Va=[1,26],$Vb=[1,27],$Vc=[1,28],$Vd=[1,29],$Ve=[1,30],$Vf=[1,31],$Vg=[1,32],$Vh=[1,33],$Vi=[1,34],$Vj=[1,35],$Vk=[1,36],$Vl=[1,37],$Vm=[5,19,20,21,24,30,31,33,35,39,41,42,45,46,48,51,52,53,54,55,56,57,58,59,60,61],$Vn=[1,54],$Vo=[1,51],$Vp=[1,49],$Vq=[1,52],$Vr=[1,55],$Vs=[1,56],$Vt=[1,57],$Vu=[1,58],$Vv=[1,59],$Vw=[1,60],$Vx=[1,65],$Vy=[1,63],$Vz=[1,64],$VA=[24,27],$VB=[1,80],$VC=[1,81],$VD=[1,82],$VE=[1,83],$VF=[1,84],$VG=[1,85],$VH=[1,86],$VI=[1,87],$VJ=[1,88],$VK=[1,89],$VL=[1,90],$VM=[1,91],$VN=[1,92],$VO=[1,93],$VP=[1,94],$VQ=[8,27,40,49,62,63,64,65,66,67,68,69,70,71,72,73,74,75,77],$VR=[8,27,40,49,68,69,70,71,72,73,74,75,77],$VS=[27,49],$VT=[8,27,40,49,64,65,66,67,68,69,70,71,72,73,74,75,77],$VU=[8,27,40,49,68,69,74,75,77],$VV=[1,161],$VW=[1,184],$VX=[1,183],$VY=[33,39,41];

export class AnalyzerParser extends JisonParser implements JisonParserApi {
    $?: any;

    constructor (yy = {}, lexer = new AnalyzerLexer(yy)) {
      super(yy, lexer);
    }

    symbols_: SymbolsType = {"error":2,"INIT":3,"SENTENCES":4,"EOF":5,"SENTENCE":6,"DECLARATION":7,";":8,"ASSIGNMENT":9,"PRINT":10,"INCDEC":11,"IF":12,"SWITCH":13,"FOR":14,"WHILE":15,"DO_WHILE":16,"FUNCTION":17,"CALLBACK":18,"t_break":19,"t_continue":20,"t_return":21,"EXP":22,"TYPE":23,"id":24,"=":25,"(":26,")":27,"++":28,"--":29,"t_print":30,"t_if":31,"{":32,"}":33,"t_else":34,"t_switch":35,"CASE_LIST":36,"DEFAULT":37,"CASE":38,"t_case":39,":":40,"t_default":41,"t_for":42,"DEC_ASSING_FOR":43,"UPDATE_FOR":44,"t_while":45,"t_do":46,"LIST_PARAM":47,"t_void":48,",":49,"LISTEXP":50,"t_toLower":51,"t_toUpper":52,"t_toString":53,"t_truncate":54,"t_round":55,"t_typeof":56,"tint":57,"tdouble":58,"tboolean":59,"tchar":60,"tstring":61,"+":62,"-":63,"*":64,"/":65,"^":66,"%":67,"==":68,"!=":69,"<=":70,">=":71,"<":72,">":73,"&&":74,"||":75,"!":76,"?":77,"integer":78,"float":79,"words":80,"character":81,"t_true":82,"t_false":83,"$accept":0,"$end":1};
    terminals_: TerminalsType = {2:"error",5:"EOF",8:";",19:"t_break",20:"t_continue",21:"t_return",24:"id",25:"=",26:"(",27:")",28:"++",29:"--",30:"t_print",31:"t_if",32:"{",33:"}",34:"t_else",35:"t_switch",39:"t_case",40:":",41:"t_default",42:"t_for",45:"t_while",46:"t_do",48:"t_void",49:",",51:"t_toLower",52:"t_toUpper",53:"t_toString",54:"t_truncate",55:"t_round",56:"t_typeof",57:"tint",58:"tdouble",59:"tboolean",60:"tchar",61:"tstring",62:"+",63:"-",64:"*",65:"/",66:"^",67:"%",68:"==",69:"!=",70:"<=",71:">=",72:"<",73:">",74:"&&",75:"||",76:"!",77:"?",78:"integer",79:"float",80:"words",81:"character",82:"t_true",83:"t_false"};
    productions_: ProductionsType = [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,2],[6,3],[7,4],[7,2],[7,7],[9,3],[11,2],[11,2],[10,4],[12,7],[12,11],[12,9],[13,7],[13,8],[13,7],[36,2],[36,1],[38,4],[37,3],[14,11],[43,4],[43,3],[43,0],[44,2],[44,2],[44,3],[15,7],[16,9],[17,8],[17,7],[17,8],[17,7],[47,4],[47,2],[18,4],[18,3],[18,4],[18,4],[18,4],[18,4],[18,4],[18,4],[50,3],[50,1],[23,1],[23,1],[23,1],[23,1],[23,1],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,2],[22,1],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,2],[22,5],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1]];
    table: Array<StateType> = [{3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,20:$V1,21:$V2,23:18,24:$V3,30:$V4,31:$V5,35:$V6,42:$V7,45:$V8,46:$V9,48:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl},{1:[3]},{5:[1,38],6:39,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,20:$V1,21:$V2,23:18,24:$V3,30:$V4,31:$V5,35:$V6,42:$V7,45:$V8,46:$V9,48:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl},o($Vm,[2,3]),{8:[1,40]},{8:[1,41]},{8:[1,42]},{8:[1,43]},o($Vm,[2,8]),o($Vm,[2,9]),o($Vm,[2,10]),o($Vm,[2,11]),o($Vm,[2,12]),o($Vm,[2,13]),{8:[1,44]},{8:[1,45]},{8:[1,46]},{8:[1,47],11:50,18:53,22:48,24:$Vn,26:$Vo,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,63:$Vp,76:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw},{24:[1,61]},{25:[1,62],26:$Vx,28:$Vy,29:$Vz},{26:[1,66]},{26:[1,67]},{26:[1,68]},{26:[1,69]},{26:[1,70]},{32:[1,71]},{24:[1,72]},{26:[1,73]},{26:[1,74]},{26:[1,75]},{26:[1,76]},{26:[1,77]},{26:[1,78]},o($VA,[2,61]),o($VA,[2,62]),o($VA,[2,63]),o($VA,[2,64]),o($VA,[2,65]),{1:[2,1]},o($Vm,[2,2]),o($Vm,[2,4]),o($Vm,[2,5]),o($Vm,[2,6]),o($Vm,[2,7]),o($Vm,[2,14]),o($Vm,[2,15]),o($Vm,[2,16]),o($Vm,[2,17]),{8:[1,79],62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,77:$VP},{11:50,18:53,22:95,24:$Vn,26:$Vo,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,63:$Vp,76:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw},o($VQ,[2,73]),{11:50,18:53,22:96,24:$Vn,26:$Vo,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,63:$Vp,76:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw},{11:50,18:53,22:97,24:$Vn,26:$Vo,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,63:$Vp,76:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw},o($VQ,[2,85]),o($VQ,[2,86],{26:$Vx,28:$Vy,29:$Vz}),o($VQ,[2,87]),o($VQ,[2,88]),o($VQ,[2,89]),o($VQ,[2,90]),o($VQ,[2,91]),o($VQ,[2,92]),{8:[2,20],25:[1,98],26:[1,99]},{11:50,18:53,22:100,24:$Vn,26:$Vo,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,63:$Vp,76:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw},o($VQ,[2,23]),o($VQ,[2,24]),{11:50,18:53,22:103,24:$Vn,26:$Vo,27:[1,102],50:101,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,63:$Vp,76:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw},{11:50,18:53,22:104,24:$Vn,26:$Vo,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,63:$Vp,76:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw},{11:50,18:53,22:105,24:$Vn,26:$Vo,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,63:$Vp,76:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw},{11:50,18:53,22:106,24:$Vn,26:$Vo,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,63:$Vp,76:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw},{8:[2,39],23:108,24:[1,109],43:107,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl},{11:50,18:53,22:110,24:$Vn,26:$Vo,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,63:$Vp,76:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw},{4:111,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,20:$V1,21:$V2,23:18,24:$V3,30:$V4,31:$V5,35:$V6,42:$V7,45:$V8,46:$V9,48:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl},{26:[1,112]},{11:50,18:53,22:113,24:$Vn,26:$Vo,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,63:$Vp,76:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw},{11:50,18:53,22:114,24:$Vn,26:$Vo,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,63:$Vp,76:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw},{11:50,18:53,22:115,24:$Vn,26:$Vo,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,63:$Vp,76:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw},{11:50,18:53,22:116,24:$Vn,26:$Vo,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,63:$Vp,76:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw},{11:50,18:53,22:117,24:$Vn,26:$Vo,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,63:$Vp,76:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw},{11:50,18:53,22:118,24:$Vn,26:$Vo,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,63:$Vp,76:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw},o($Vm,[2,18]),{11:50,18:53,22:119,24:$Vn,26:$Vo,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,63:$Vp,76:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw},{11:50,18:53,22:120,24:$Vn,26:$Vo,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,63:$Vp,76:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw},{11:50,18:53,22:121,24:$Vn,26:$Vo,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,63:$Vp,76:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw},{11:50,18:53,22:122,24:$Vn,26:$Vo,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,63:$Vp,76:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw},{11:50,18:53,22:123,24:$Vn,26:$Vo,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,63:$Vp,76:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw},{11:50,18:53,22:124,24:$Vn,26:$Vo,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,63:$Vp,76:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw},{11:50,18:53,22:125,24:$Vn,26:$Vo,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,63:$Vp,76:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw},{11:50,18:53,22:126,24:$Vn,26:$Vo,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,63:$Vp,76:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw},{11:50,18:53,22:127,24:$Vn,26:$Vo,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,63:$Vp,76:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw},{11:50,18:53,22:128,24:$Vn,26:$Vo,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,63:$Vp,76:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw},{11:50,18:53,22:129,24:$Vn,26:$Vo,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,63:$Vp,76:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw},{11:50,18:53,22:130,24:$Vn,26:$Vo,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,63:$Vp,76:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw},{11:50,18:53,22:131,24:$Vn,26:$Vo,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,63:$Vp,76:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw},{11:50,18:53,22:132,24:$Vn,26:$Vo,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,63:$Vp,76:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw},{11:50,18:53,22:133,24:$Vn,26:$Vo,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,63:$Vp,76:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw},o($VR,[2,72],{62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG}),{27:[1,134],62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,77:$VP},o($VR,[2,83],{62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG}),{11:50,18:53,22:135,24:$Vn,26:[1,136],51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,63:$Vp,76:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw},{23:139,27:[1,138],47:137,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl},{8:[2,22],62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,77:$VP},{27:[1,140],49:[1,141]},o($VQ,[2,52]),o($VS,[2,60],{62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,77:$VP}),{27:[1,142],62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,77:$VP},{27:[1,143],62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,77:$VP},{27:[1,144],62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,77:$VP},{8:[1,145]},{24:[1,146]},{25:[1,147]},{27:[1,148],62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,77:$VP},{6:39,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,20:$V1,21:$V2,23:18,24:$V3,30:$V4,31:$V5,33:[1,149],35:$V6,42:$V7,45:$V8,46:$V9,48:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl},{23:139,27:[1,151],47:150,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl},{27:[1,152],62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,77:$VP},{27:[1,153],62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,77:$VP},{27:[1,154],62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,77:$VP},{27:[1,155],62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,77:$VP},{27:[1,156],62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,77:$VP},{27:[1,157],62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,77:$VP},o($VQ,[2,66]),o($VQ,[2,67]),o($VT,[2,68],{62:$VB,63:$VC}),o($VT,[2,69],{62:$VB,63:$VC}),o($VR,[2,70],{62:$VB,63:$VC,64:$VD,65:$VE,67:$VG}),o($VT,[2,71],{62:$VB,63:$VC}),o($VU,[2,75],{62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,70:$VJ,71:$VK,72:$VL,73:$VM}),o($VU,[2,76],{62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,70:$VJ,71:$VK,72:$VL,73:$VM}),o($VR,[2,77],{62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG}),o($VR,[2,78],{62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG}),o($VR,[2,79],{62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG}),o($VR,[2,80],{62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG}),o([8,27,40,49,74,77],[2,81],{62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,75:$VO}),o([8,27,40,49,74,75,77],[2,82],{62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM}),{40:[1,158],62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,77:$VP},o($VQ,[2,74]),{8:[2,19],62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,77:$VP},{11:50,18:53,22:96,23:159,24:$Vn,26:$Vo,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,63:$Vp,76:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw},{27:[1,160],49:$VV},{32:[1,162]},{24:[1,163]},o($VQ,[2,51]),{11:50,18:53,22:164,24:$Vn,26:$Vo,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,63:$Vp,76:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw},{8:[2,25]},{32:[1,165]},{32:[1,166]},{11:50,18:53,22:167,24:$Vn,26:$Vo,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,63:$Vp,76:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw},{25:[1,168]},{11:50,18:53,22:169,24:$Vn,26:$Vo,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,63:$Vp,76:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw},{32:[1,170]},{45:[1,171]},{27:[1,172],49:$VV},{32:[1,173]},o($VQ,[2,53]),o($VQ,[2,54]),o($VQ,[2,55]),o($VQ,[2,56]),o($VQ,[2,57]),o($VQ,[2,58]),{11:50,18:53,22:174,24:$Vn,26:$Vo,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,63:$Vp,76:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw},{27:[1,175]},{32:[1,176]},{23:177,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl},{4:178,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,20:$V1,21:$V2,23:18,24:$V3,30:$V4,31:$V5,35:$V6,42:$V7,45:$V8,46:$V9,48:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl},o($VS,[2,50]),o($VS,[2,59],{62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,77:$VP}),{4:179,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,20:$V1,21:$V2,23:18,24:$V3,30:$V4,31:$V5,35:$V6,42:$V7,45:$V8,46:$V9,48:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl},{36:180,37:181,38:182,39:$VW,41:$VX},{8:[1,185],62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,77:$VP},{11:50,18:53,22:186,24:$Vn,26:$Vo,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,63:$Vp,76:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw},{8:[2,38],62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,77:$VP},{4:187,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,20:$V1,21:$V2,23:18,24:$V3,30:$V4,31:$V5,35:$V6,42:$V7,45:$V8,46:$V9,48:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl},{26:[1,188]},{32:[1,189]},{4:190,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,20:$V1,21:$V2,23:18,24:$V3,30:$V4,31:$V5,35:$V6,42:$V7,45:$V8,46:$V9,48:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl},o([8,27,40,49,77],[2,84],{62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO}),{11:50,18:53,22:191,24:$Vn,26:$Vo,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,63:$Vp,76:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw},{4:192,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,20:$V1,21:$V2,23:18,24:$V3,30:$V4,31:$V5,35:$V6,42:$V7,45:$V8,46:$V9,48:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl},{24:[1,193]},{6:39,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,20:$V1,21:$V2,23:18,24:$V3,30:$V4,31:$V5,33:[1,194],35:$V6,42:$V7,45:$V8,46:$V9,48:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl},{6:39,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,20:$V1,21:$V2,23:18,24:$V3,30:$V4,31:$V5,33:[1,195],35:$V6,42:$V7,45:$V8,46:$V9,48:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl},{33:[1,196],37:197,38:198,39:$VW,41:$VX},{33:[1,199]},o($VY,[2,33]),{40:[1,200]},{11:50,18:53,22:201,24:$Vn,26:$Vo,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,63:$Vp,76:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw},{24:[1,203],44:202},{8:[2,37],62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,77:$VP},{6:39,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,20:$V1,21:$V2,23:18,24:$V3,30:$V4,31:$V5,33:[1,204],35:$V6,42:$V7,45:$V8,46:$V9,48:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl},{11:50,18:53,22:205,24:$Vn,26:$Vo,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,63:$Vp,76:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw},{4:206,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,20:$V1,21:$V2,23:18,24:$V3,30:$V4,31:$V5,35:$V6,42:$V7,45:$V8,46:$V9,48:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl},{6:39,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,20:$V1,21:$V2,23:18,24:$V3,30:$V4,31:$V5,33:[1,207],35:$V6,42:$V7,45:$V8,46:$V9,48:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl},{8:[2,21],62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,77:$VP},{6:39,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,20:$V1,21:$V2,23:18,24:$V3,30:$V4,31:$V5,33:[1,208],35:$V6,42:$V7,45:$V8,46:$V9,48:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl},o($VS,[2,49]),o($Vm,[2,46]),o($Vm,[2,26],{34:[1,209]}),o($Vm,[2,29]),{33:[1,210]},o($VY,[2,32]),o($Vm,[2,31]),{4:211,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,20:$V1,21:$V2,23:18,24:$V3,30:$V4,31:$V5,35:$V6,42:$V7,45:$V8,46:$V9,48:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl},{40:[1,212],62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,77:$VP},{27:[1,213]},{25:[1,216],28:[1,214],29:[1,215]},o($Vm,[2,43]),{27:[1,217],62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,77:$VP},{6:39,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,20:$V1,21:$V2,23:18,24:$V3,30:$V4,31:$V5,33:[1,218],35:$V6,42:$V7,45:$V8,46:$V9,48:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl},o($Vm,[2,48]),o($Vm,[2,45]),{12:220,31:$V5,32:[1,219]},o($Vm,[2,30]),{6:39,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,20:$V1,21:$V2,23:18,24:$V3,30:$V4,31:$V5,33:[2,35],35:$V6,42:$V7,45:$V8,46:$V9,48:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl},{4:221,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,20:$V1,21:$V2,23:18,24:$V3,30:$V4,31:$V5,35:$V6,42:$V7,45:$V8,46:$V9,48:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl},{32:[1,222]},{27:[2,40]},{27:[2,41]},{11:50,18:53,22:223,24:$Vn,26:$Vo,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,63:$Vp,76:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw},{8:[1,224]},o($Vm,[2,47]),{4:225,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,20:$V1,21:$V2,23:18,24:$V3,30:$V4,31:$V5,35:$V6,42:$V7,45:$V8,46:$V9,48:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl},o($Vm,[2,28]),o($VY,[2,34],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,23:18,6:39,19:$V0,20:$V1,21:$V2,24:$V3,30:$V4,31:$V5,35:$V6,42:$V7,45:$V8,46:$V9,48:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl}),{4:226,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,20:$V1,21:$V2,23:18,24:$V3,30:$V4,31:$V5,35:$V6,42:$V7,45:$V8,46:$V9,48:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl},{27:[2,42],62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,77:$VP},o($Vm,[2,44]),{6:39,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,20:$V1,21:$V2,23:18,24:$V3,30:$V4,31:$V5,33:[1,227],35:$V6,42:$V7,45:$V8,46:$V9,48:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl},{6:39,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,20:$V1,21:$V2,23:18,24:$V3,30:$V4,31:$V5,33:[1,228],35:$V6,42:$V7,45:$V8,46:$V9,48:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl},o($Vm,[2,27]),o($Vm,[2,36])];
    defaultActions: {[key:number]: any} = {38:[2,1],142:[2,25],214:[2,40],215:[2,41]};

    performAction (yytext:string, yyleng:number, yylineno:number, yy:any, yystate:number /* action[1] */, $$:any /* vstack */, _$:any /* lstack */): any {
/* this == yyval */
          var $0 = $$.length - 1;
        switch (yystate) {
case 1:

      let root = new AST($$[$0-1]);
      this.$ = root;
      return this.$;
    
break;
case 2:

            $$[$0-1].push($$[$0]);
            this.$ = $$[$0-1];
          
break;
case 3:

            let arr = [];
            arr.push($$[$0]);
            this.$ = arr;
          
break;
case 4: case 5: case 6: case 7: case 14: case 74:
 this.$ = $$[$0-1]; 
break;
case 8: case 9: case 10: case 11: case 12: case 13: case 73: case 85:
 this.$ = $$[$0]; 
break;
case 15:
 this.$ = new Break(); 
break;
case 16:
 this.$ = new Continue(); 
break;
case 17:
 this.$ = new Return(null); 
break;
case 18:
 this.$ = new Return($$[$0-1]); 
break;
case 19:

              this.$ = new VariableDeclaration($$[$0-3], $$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
            
break;
case 20:

              this.$ = new VariableDeclaration($$[$0-1], $$[$0], null, _$[$0-1].first_line, _$[$0-1].first_column);
            
break;
case 21:

              this.$ = new Cast($$[$0-6], $$[$0-5], $$[$0], $$[$0-2] ,_$[$0-6].first_line, _$[$0-6].first_column);
            
break;
case 22:

              this.$ = new Assigment($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
            
break;
case 23: case 40:
 this.$ = new Assigment($$[$0-1],new Arithmetic(new Identifier($$[$0-1],_$[$0-1].first_line, _$[$0-1].first_column),new Primitive(1, "INTEGER", _$[$0-1].first_line, _$[$0-1].first_column),false,_$[$0-1].first_line, _$[$0-1].first_column,"+"),_$[$0-1].first_line, _$[$0-1].first_column ); 
break;
case 24:
 this.$ = new Assigment($$[$0-1],new Arithmetic(new Identifier($$[$0-1],_$[$0-1].first_line, _$[$0-1].first_column),new Primitive(1, "INTEGER", _$[$0-1].first_line, _$[$0-1].first_column),false,_$[$0-1].first_line, _$[$0-1].first_column,"-"),_$[$0-1].first_line, _$[$0-1].first_column ); 
break;
case 25:
 this.$ = new Print($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 26:
 this.$ = new IF($$[$0-4],$$[$0-1],[],_$[$0-6].first_line, _$[$0-6].last_column);
break;
case 27:
 this.$ = new IF($$[$0-8],$$[$0-5],$$[$0-1],_$[$0-10].first_line, _$[$0-10].last_column);
break;
case 28:
 this.$ = new IF($$[$0-6],$$[$0-3],[$$[$0]],_$[$0-8].first_line, _$[$0-8].last_column);
break;
case 29:
 this.$ = new Switch($$[$0-4],$$[$0-1],null,_$[$0-6].first_line, _$[$0-6].last_column); 
break;
case 30:
 this.$ = new Switch($$[$0-5],$$[$0-2],$$[$0-1],_$[$0-7].first_line, _$[$0-7].last_column); 
break;
case 31:
 this.$ = new Switch($$[$0-4],[],$$[$0-1],_$[$0-6].first_line, _$[$0-6].last_column); 
break;
case 32:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 33:
 let arrCase = []; arrCase.push($$[$0]); this.$ = arrCase; 
break;
case 34:
 this.$ = new Case($$[$0-2],$$[$0],_$[$0-3].first_line, _$[$0-3].last_column); 
break;
case 35:
 this.$ = new Case(null,$$[$0],_$[$0-2].first_line, _$[$0-2].last_column); 
break;
case 36:
 this.$ = new For($$[$0-8],$$[$0-6],$$[$0-4],$$[$0-1],_$[$0-10].first_line, _$[$0-10].last_column); 
break;
case 37:
 this.$ = new VariableDeclaration($$[$0-3], $$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 38: case 42:
 this.$ = new Assigment($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 39:
 this.$ = null; 
break;
case 41:
 this.$ = new Assigment($$[$0-1],new Arithmetic(new Identifier($$[$0-1],_$[$0-1].first_line, _$[$0-1].first_column),new Primitive(1, "INTEGER", _$[$0-1].first_line, _$[$0-1].first_column),false,_$[$0-1].first_line, _$[$0-1].first_column,"-"),_$[$0-1].first_line, _$[$0-1].first_column );
break;
case 43:
 this.$ = new While($$[$0-4],$$[$0-1],_$[$0-6].first_line, _$[$0-6].last_column); 
break;
case 44:
 this.$ = new DoWhile($$[$0-6],$$[$0-2],_$[$0-8].first_line, _$[$0-8].last_column); 
break;
case 45:
 this.$ = new Function(2,$$[$0-7],$$[$0-6],$$[$0-4],false,$$[$0-1],_$[$0-7].first_line, _$[$0-7].last_column); 
break;
case 46:
 this.$ = new Function(2,$$[$0-6],$$[$0-5],[],false,$$[$0-1],_$[$0-6].first_line, _$[$0-6].last_column); 
break;
case 47:
 this.$ = new Function(3,$$[$0-7],$$[$0-6],$$[$0-4],true,$$[$0-1],_$[$0-7].first_line, _$[$0-7].last_column); 
break;
case 48:
 this.$ = new Function(3,$$[$0-6],$$[$0-5],[],true,$$[$0-1],_$[$0-6].first_line, _$[$0-6].last_column); 
break;
case 49:
this.$ = $$[$0-3]; this.$.push(new Symbol(6, $$[$0-1], $$[$0], null))
break;
case 50:
this.$ = []; this.$.push(new Symbol(6, $$[$0-1], $$[$0], null))
break;
case 51:
 this.$ = new Callback($$[$0-3],$$[$0-1],_$[$0-3].first_line, _$[$0-3].last_column); 
break;
case 52:
 this.$ = new Callback($$[$0-2],[],_$[$0-2].first_line, _$[$0-2].last_column); 
break;
case 53:
this.$ = new ToLower($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column);
break;
case 54:
this.$ = new ToUpper($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column);
break;
case 55:
this.$ = new ToString($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column);
break;
case 56:
this.$ = new Truncate($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column);
break;
case 57:
this.$ = new Round($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column);
break;
case 58:
this.$ = new Typeof($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column);
break;
case 59:

            this.$ = $$[$0-2];
            this.$.push($$[$0]);
           
break;
case 60:

            this.$ = [];
            this.$.push($$[$0]);
           
break;
case 61:
 this.$ = new Type("INTEGER");
break;
case 62:
 this.$ = new Type("DOUBLE");
break;
case 63:
 this.$ = new Type("BOOLEAN");
break;
case 64:
 this.$ = new Type("CHAR");
break;
case 65:
 this.$ = new Type("STRING");
break;
case 66:
 this.$ = new Arithmetic($$[$0-2],$$[$0],false,_$[$0-2].first_line, _$[$0-2].first_column,"+"); 
break;
case 67:
 this.$ = new Arithmetic($$[$0-2],$$[$0],false,_$[$0-2].first_line, _$[$0-2].first_column,"-"); 
break;
case 68:
 this.$ = new Arithmetic($$[$0-2],$$[$0],false,_$[$0-2].first_line, _$[$0-2].first_column,"*"); 
break;
case 69:
 this.$ = new Arithmetic($$[$0-2],$$[$0],false,_$[$0-2].first_line, _$[$0-2].first_column,"/");
break;
case 70:
 this.$ = new Arithmetic($$[$0-2],$$[$0],false,_$[$0-2].first_line, _$[$0-2].first_column,"^"); 
break;
case 71:
 this.$ = new Arithmetic($$[$0-2],$$[$0],false,_$[$0-2].first_line, _$[$0-2].first_column,"%"); 
break;
case 72:
 this.$ = new Arithmetic($$[$0],null,true,_$[$0-1].first_line, _$[$0-1].first_column,"UNARY"); 
break;
case 75:
 this.$ = new Relational($$[$0-2],$$[$0],false,_$[$0-2].first_line, _$[$0-2].first_column,"=="); 
break;
case 76:
 this.$ = new Relational($$[$0-2],$$[$0],false,_$[$0-2].first_line, _$[$0-2].first_column,"!="); 
break;
case 77:
 this.$ = new Relational($$[$0-2],$$[$0],false,_$[$0-2].first_line, _$[$0-2].first_column,"<="); 
break;
case 78:
 this.$ = new Relational($$[$0-2],$$[$0],false,_$[$0-2].first_line, _$[$0-2].first_column,">="); 
break;
case 79:
 this.$ = new Relational($$[$0-2],$$[$0],false,_$[$0-2].first_line, _$[$0-2].first_column,"<"); 
break;
case 80:
 this.$ = new Relational($$[$0-2],$$[$0],false,_$[$0-2].first_line, _$[$0-2].first_column,">"); 
break;
case 81:
 this.$ = new Logic($$[$0-2],$$[$0],false,_$[$0-2].first_line, _$[$0-2].first_column,"&&"); 
break;
case 82:
 this.$ = new Logic($$[$0-2],$$[$0],false,_$[$0-2].first_line, _$[$0-2].first_column,"||"); 
break;
case 83:
 this.$ = new Logic($$[$0],null,true,_$[$0-1].first_line, _$[$0-1].first_column,"!"); 
break;
case 84:
 this.$ = new TernaryOperator($$[$0-4],$$[$0-2],$$[$0],_$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 86:
 this.$ = new Identifier($$[$0],_$[$0].first_line, _$[$0].first_column);
break;
case 87:
 this.$ = new Primitive(parseInt($$[$0]), "INTEGER", _$[$0].first_line, _$[$0].first_column);
break;
case 88:
 this.$ = new Primitive(parseFloat($$[$0]), "DOUBLE", _$[$0].first_line, _$[$0].first_column);
break;
case 89:
 this.$ = new Primitive($$[$0], "STRING", _$[$0].first_line, _$[$0].first_column);
break;
case 90:
 this.$ = new Primitive($$[$0], "CHAR", _$[$0].first_line, _$[$0].first_column);
break;
case 91:
 this.$ = new Primitive(true, "BOOLEAN", _$[$0].first_line, _$[$0].first_column);
break;
case 92:
 this.$ = new Primitive(false, "BOOLEAN", _$[$0].first_line, _$[$0].first_column);
break;
        }
    }
}


/* generated by ts-jison-lex 0.3.0 */
import { JisonLexer, JisonLexerApi } from '@ts-jison/lexer';
export class AnalyzerLexer extends JisonLexer implements JisonLexerApi {
    options: any = {"case-insensitive":true,"moduleName":"Analyzer"};
    constructor (yy = {}) {
        super(yy);
    }

    rules: RegExp[] = [/^(?:\s+)/i,/^(?:(\/\/).*)/i,/^(?:[ \r\t])/i,/^(?:\n)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:new\b)/i,/^(?:list\b)/i,/^(?:add\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:print\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:length\b)/i,/^(?:truncate\b)/i,/^(?:round\b)/i,/^(?:typeof\b)/i,/^(?:toString\b)/i,/^(?:toCharArray\b)/i,/^(?:main\b)/i,/^(?:void\b)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:\?)/i,/^(?::)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:=)/i,/^(?:\$)/i,/^(?:;)/i,/^(?:,)/i,/^(?:\.)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:([a-zA-ZÑñ]|(_[a-zA-ZÑñ]))([a-zA-ZÑñ]|[0-9]|_)*)/i,/^(?:'(?:(\\)["bfnrt/(\\)]|(\\)u[a-fA-F0-9]{4}|[^"(\\)])')/i,/^(?:((?:[0-9]|[1-9][0-9]+))((?:\.[0-9]+))\b)/i,/^(?:((?:[0-9]|[1-9][0-9]+))\b)/i,/^(?:"(?:[{cor1}|{cor2}]|["\\"]["bnrt/["\\"]|[^"["\\"])*")/i,/^(?:$)/i,/^(?:.)/i];
    conditions: any = {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73],"inclusive":true}}
    performAction (yy:any,yy_:any,$avoiding_name_collisions:any,YY_START:any): any {
          var YYSTATE=YY_START;
        switch($avoiding_name_collisions) {
    case 0:/* skip whitespace */
      break;
    case 1:/* line comment */
      break;
    case 2:/* white space */
      break;
    case 3:/* white space */
      break;
    case 4:/* multi comment */
      break;
    case 5: return 57; 
      break;
    case 6: return 58; 
      break;
    case 7: return 59; 
      break;
    case 8: return 60; 
      break;
    case 9: return 61; 
      break;
    case 10: return 82; 
      break;
    case 11: return 83; 
      break;
    case 12: return 't_new'; 
      break;
    case 13: return 't_list'; 
      break;
    case 14: return 't_add'; 
      break;
    case 15: return 31; 
      break;
    case 16: return 34; 
      break;
    case 17: return 35; 
      break;
    case 18: return 39; 
      break;
    case 19: return 41; 
      break;
    case 20: return 45; 
      break;
    case 21: return 42; 
      break;
    case 22: return 46; 
      break;
    case 23: return 19; 
      break;
    case 24: return 20; 
      break;
    case 25: return 21; 
      break;
    case 26: return 30; 
      break;
    case 27: return 51; 
      break;
    case 28: return 52; 
      break;
    case 29: return 't_length'; 
      break;
    case 30: return 54; 
      break;
    case 31: return 55; 
      break;
    case 32: return 56; 
      break;
    case 33: return 53; 
      break;
    case 34: return 't_toCharArray'; 
      break;
    case 35: return 't_main'; 
      break;
    case 36: return 48; 
      break;
    case 37:return 28;
      break;
    case 38:return 29;
      break;
    case 39:return 62;
      break;
    case 40:return 63;
      break;
    case 41:return 64;
      break;
    case 42:return 65;
      break;
    case 43:return 66;
      break;
    case 44:return 67;
      break;
    case 45:return 70;
      break;
    case 46:return 71;
      break;
    case 47:return 68;
      break;
    case 48:return 69;
      break;
    case 49:return 72;
      break;
    case 50:return 73;
      break;
    case 51:return 77;
      break;
    case 52:return 40;
      break;
    case 53:return 75;
      break;
    case 54:return 74;
      break;
    case 55:return 76;
      break;
    case 56:return 26;
      break;
    case 57:return 27;
      break;
    case 58:return 25;
      break;
    case 59:return '$';
      break;
    case 60:return 8;
      break;
    case 61:return 49;
      break;
    case 62:return '.';
      break;
    case 63:return 32;
      break;
    case 64:return 33;
      break;
    case 65:return '[';
      break;
    case 66:return ']';
      break;
    case 67:yy_.yytext = yy_.yytext.toLowerCase();          return 24;
      break;
    case 68:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);     return 81// substr to remove the quotes
      break;
    case 69:return 79
      break;
    case 70:return 78
      break;
    case 71:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);     return 80;
      break;
    case 72: return 5; 
      break;
    case 73:console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
      break;
        }
    }
}

