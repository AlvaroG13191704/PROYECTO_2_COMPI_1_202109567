/* parser generated by jison 0.3.0 */
/**
 * Returns a Parser implementing JisonParserApi and a Lexer implementing JisonLexerApi.
 */

  import { AST } from '../AST/AST';
  import { Type } from '../TableSymbols/Type';
  // main
  import { Main } from '../Instructions/Main';
  // INSTRUCTIONS
  import { VariableDeclaration } from '../Instructions/Declaration';
  import { Assigment } from '../Instructions/Assigment';
  import { Print } from '../Instructions/Print';
  import { Cast } from '../Instructions/Cast';
  import { IF } from '../Instructions/ControlSentences/IF';
  import { For } from '../Instructions/LoopSentences/For';
  import { While } from '../Instructions/LoopSentences/While';
  import { DoWhile } from '../Instructions/LoopSentences/DoWhile';
  import { Switch } from '../Instructions/ControlSentences/Switch';
  import { Case } from '../Instructions/ControlSentences/Case';
  import { Break } from '../Instructions/TransferSentences/Break';
  import { Continue } from '../Instructions/TransferSentences/Continue';
  import { Return } from '../Instructions/TransferSentences/Return';
  import { Function } from '../Instructions/Function';
  import { Callback } from '../Instructions/Callback';
  // DATA STRUCTURES
  import { Vector } from '../Instructions/Vector';
  import { ModifyVector } from '../Instructions/DataStructure/ModifyVector';
  // EXPRESSIONS
  import { Identifier } from '../Expressions/Identifier';
  import { Primitive } from '../Expressions/Primitive';
  import { TernaryOperator } from '../Expressions/TernaryOperator';
  import { Arithmetic } from '../Expressions/Operations/Arithmetic';
  import { Logic } from '../Expressions/Operations/Logic';
  import { Relational } from '../Expressions/Operations/Relational';
  // data structures
  import { AccessVector } from '../Expressions/DataStructures/Vector/AccessVector';
  // natives
  import { ToLower } from '../Expressions/Natives/ToLower';
  import { ToUpper } from '../Expressions/Natives/ToUpper';
  import { ToString } from '../Expressions/Natives/ToString';
  import { Truncate } from '../Expressions/Natives/Truncate';
  import { Round } from '../Expressions/Natives/Round';
  import { Typeof } from '../Expressions/Natives/Typeof';
  import { Length } from '../Expressions/Natives/Length';
  // SYmbol
  import { Symbol } from '../TableSymbols/Symbol';


import { JisonParser, JisonParserApi, StateType, SymbolsType, TerminalsType, ProductionsType, o } from '@ts-jison/parser';const $V0=[1,16],$V1=[1,17],$V2=[1,18],$V3=[1,21],$V4=[1,22],$V5=[1,23],$V6=[1,24],$V7=[1,25],$V8=[1,26],$V9=[1,27],$Va=[1,28],$Vb=[1,29],$Vc=[1,30],$Vd=[1,31],$Ve=[1,32],$Vf=[1,33],$Vg=[1,34],$Vh=[1,35],$Vi=[1,36],$Vj=[1,37],$Vk=[1,38],$Vl=[1,39],$Vm=[1,40],$Vn=[1,19],$Vo=[5,20,21,22,25,34,37,38,40,44,46,47,50,51,53,55,56,57,58,59,60,61,62,63,64,65,66,67],$Vp=[1,58],$Vq=[1,55],$Vr=[1,53],$Vs=[1,56],$Vt=[1,59],$Vu=[1,60],$Vv=[1,61],$Vw=[1,62],$Vx=[1,63],$Vy=[1,64],$Vz=[1,73],$VA=[1,71],$VB=[1,72],$VC=[25,28,29],$VD=[1,89],$VE=[1,90],$VF=[1,91],$VG=[1,92],$VH=[1,93],$VI=[1,94],$VJ=[1,95],$VK=[1,96],$VL=[1,97],$VM=[1,98],$VN=[1,99],$VO=[1,100],$VP=[1,101],$VQ=[1,102],$VR=[1,103],$VS=[8,28,30,34,45,54,68,69,70,71,72,73,74,75,76,77,78,79,80,81,83],$VT=[1,107],$VU=[8,28,30,34,45,54,80,81,83],$VV=[1,157],$VW=[28,34,54],$VX=[8,28,30,34,45,54,68,69,74,75,76,77,78,79,80,81,83],$VY=[8,28,30,34,45,54,68,69,70,71,73,74,75,76,77,78,79,80,81,83],$VZ=[8,28,30,34,45,54,74,75,76,77,78,79,80,81,83],$V_=[1,179],$V$=[2,57],$V01=[28,54],$V11=[1,207],$V21=[1,206],$V31=[34,44,46];

export class AnalyzerParser extends JisonParser implements JisonParserApi {
    $?: any;

    constructor (yy = {}, lexer = new AnalyzerLexer(yy)) {
      super(yy, lexer);
    }

    symbols_: SymbolsType = {"error":2,"INIT":3,"SENTENCES":4,"EOF":5,"SENTENCE":6,"MAIN":7,";":8,"DECLARATION":9,"ASSIGNMENT":10,"PRINT":11,"INCDEC":12,"IF":13,"SWITCH":14,"FOR":15,"WHILE":16,"DO_WHILE":17,"FUNCTION":18,"CALLBACK":19,"t_break":20,"t_continue":21,"t_return":22,"EXP":23,"TYPE":24,"id":25,"=":26,"(":27,")":28,"[":29,"]":30,"t_new":31,"{":32,"LISTEXP":33,"}":34,"++":35,"--":36,"t_print":37,"t_if":38,"t_else":39,"t_switch":40,"CASE_LIST":41,"DEFAULT":42,"CASE":43,"t_case":44,":":45,"t_default":46,"t_for":47,"DEC_ASSING_FOR":48,"UPDATE_FOR":49,"t_while":50,"t_do":51,"LIST_PARAM":52,"t_void":53,",":54,"t_toLower":55,"t_toUpper":56,"t_toString":57,"t_truncate":58,"t_round":59,"t_typeof":60,"t_length":61,"tint":62,"tdouble":63,"tboolean":64,"tchar":65,"tstring":66,"t_main":67,"+":68,"-":69,"*":70,"/":71,"^":72,"%":73,"==":74,"!=":75,"<=":76,">=":77,"<":78,">":79,"&&":80,"||":81,"!":82,"?":83,"integer":84,"float":85,"words":86,"character":87,"t_true":88,"t_false":89,"$accept":0,"$end":1};
    terminals_: TerminalsType = {2:"error",5:"EOF",8:";",20:"t_break",21:"t_continue",22:"t_return",25:"id",26:"=",27:"(",28:")",29:"[",30:"]",31:"t_new",32:"{",34:"}",35:"++",36:"--",37:"t_print",38:"t_if",39:"t_else",40:"t_switch",44:"t_case",45:":",46:"t_default",47:"t_for",50:"t_while",51:"t_do",53:"t_void",54:",",55:"t_toLower",56:"t_toUpper",57:"t_toString",58:"t_truncate",59:"t_round",60:"t_typeof",61:"t_length",62:"tint",63:"tdouble",64:"tboolean",65:"tchar",66:"tstring",67:"t_main",68:"+",69:"-",70:"*",71:"/",72:"^",73:"%",74:"==",75:"!=",76:"<=",77:">=",78:"<",79:">",80:"&&",81:"||",82:"!",83:"?",84:"integer",85:"float",86:"words",87:"character",88:"t_true",89:"t_false"};
    productions_: ProductionsType = [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,2],[6,3],[9,4],[9,2],[9,7],[9,10],[9,8],[10,3],[10,6],[12,2],[12,2],[11,4],[13,7],[13,11],[13,9],[14,7],[14,8],[14,7],[41,2],[41,1],[43,4],[42,3],[15,11],[48,4],[48,3],[48,0],[49,2],[49,2],[49,3],[16,7],[17,9],[18,8],[18,7],[18,8],[18,7],[52,4],[52,2],[19,4],[19,3],[19,4],[19,4],[19,4],[19,4],[19,4],[19,4],[19,4],[19,4],[33,3],[33,1],[24,1],[24,1],[24,1],[24,1],[24,1],[7,2],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,2],[23,1],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,2],[23,5],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1]];
    table: Array<StateType> = [{3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,21:$V1,22:$V2,24:20,25:$V3,37:$V4,38:$V5,40:$V6,47:$V7,50:$V8,51:$V9,53:$Va,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn},{1:[3]},{5:[1,41],6:42,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,21:$V1,22:$V2,24:20,25:$V3,37:$V4,38:$V5,40:$V6,47:$V7,50:$V8,51:$V9,53:$Va,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn},o($Vo,[2,3]),{8:[1,43]},{8:[1,44]},{8:[1,45]},{8:[1,46]},{8:[1,47]},o($Vo,[2,9]),o($Vo,[2,10]),o($Vo,[2,11]),o($Vo,[2,12]),o($Vo,[2,13]),o($Vo,[2,14]),{8:[1,48]},{8:[1,49]},{8:[1,50]},{8:[1,51],12:54,19:57,23:52,25:$Vp,27:$Vq,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,69:$Vr,82:$Vs,84:$Vt,85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy},{19:65,25:[1,66],55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh},{25:[1,67],29:[1,68]},{26:[1,69],27:$Vz,29:[1,70],35:$VA,36:$VB},{27:[1,74]},{27:[1,75]},{27:[1,76]},{27:[1,77]},{27:[1,78]},{32:[1,79]},{25:[1,80]},{27:[1,81]},{27:[1,82]},{27:[1,83]},{27:[1,84]},{27:[1,85]},{27:[1,86]},{27:[1,87]},o($VC,[2,67]),o($VC,[2,68]),o($VC,[2,69]),o($VC,[2,70]),o($VC,[2,71]),{1:[2,1]},o($Vo,[2,2]),o($Vo,[2,4]),o($Vo,[2,5]),o($Vo,[2,6]),o($Vo,[2,7]),o($Vo,[2,8]),o($Vo,[2,15]),o($Vo,[2,16]),o($Vo,[2,17]),o($Vo,[2,18]),{8:[1,88],68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,83:$VR},{12:54,19:57,23:104,25:$Vp,27:$Vq,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,69:$Vr,82:$Vs,84:$Vt,85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy},o($VS,[2,80]),{12:54,19:57,23:105,25:$Vp,27:$Vq,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,69:$Vr,82:$Vs,84:$Vt,85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy},{12:54,19:57,23:106,25:$Vp,27:$Vq,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,69:$Vr,82:$Vs,84:$Vt,85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy},o($VS,[2,92]),o($VS,[2,93],{27:$Vz,29:$VT,35:$VA,36:$VB}),o($VS,[2,94]),o($VS,[2,95]),o($VS,[2,96]),o($VS,[2,97]),o($VS,[2,98]),o($VS,[2,99]),{8:[2,72]},{27:$Vz,29:$VT},{8:[2,21],26:[1,108],27:[1,109]},{30:[1,110]},{12:54,19:57,23:111,25:$Vp,27:$Vq,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,69:$Vr,82:$Vs,84:$Vt,85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy},{12:54,19:57,23:112,25:$Vp,27:$Vq,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,69:$Vr,82:$Vs,84:$Vt,85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy},o($VS,[2,27]),o($VS,[2,28]),{12:54,19:57,23:115,25:$Vp,27:$Vq,28:[1,114],33:113,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,69:$Vr,82:$Vs,84:$Vt,85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy},{12:54,19:57,23:116,25:$Vp,27:$Vq,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,69:$Vr,82:$Vs,84:$Vt,85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy},{12:54,19:57,23:117,25:$Vp,27:$Vq,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,69:$Vr,82:$Vs,84:$Vt,85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy},{12:54,19:57,23:118,25:$Vp,27:$Vq,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,69:$Vr,82:$Vs,84:$Vt,85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy},{8:[2,43],24:120,25:[1,121],48:119,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm},{12:54,19:57,23:122,25:$Vp,27:$Vq,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,69:$Vr,82:$Vs,84:$Vt,85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy},{4:123,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,21:$V1,22:$V2,24:20,25:$V3,37:$V4,38:$V5,40:$V6,47:$V7,50:$V8,51:$V9,53:$Va,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn},{27:[1,124]},{12:54,19:57,23:125,25:$Vp,27:$Vq,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,69:$Vr,82:$Vs,84:$Vt,85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy},{12:54,19:57,23:126,25:$Vp,27:$Vq,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,69:$Vr,82:$Vs,84:$Vt,85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy},{12:54,19:57,23:127,25:$Vp,27:$Vq,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,69:$Vr,82:$Vs,84:$Vt,85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy},{12:54,19:57,23:128,25:$Vp,27:$Vq,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,69:$Vr,82:$Vs,84:$Vt,85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy},{12:54,19:57,23:129,25:$Vp,27:$Vq,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,69:$Vr,82:$Vs,84:$Vt,85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy},{12:54,19:57,23:130,25:$Vp,27:$Vq,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,69:$Vr,82:$Vs,84:$Vt,85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy},{12:54,19:57,23:131,25:$Vp,27:$Vq,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,69:$Vr,82:$Vs,84:$Vt,85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy},o($Vo,[2,19]),{12:54,19:57,23:132,25:$Vp,27:$Vq,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,69:$Vr,82:$Vs,84:$Vt,85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy},{12:54,19:57,23:133,25:$Vp,27:$Vq,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,69:$Vr,82:$Vs,84:$Vt,85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy},{12:54,19:57,23:134,25:$Vp,27:$Vq,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,69:$Vr,82:$Vs,84:$Vt,85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy},{12:54,19:57,23:135,25:$Vp,27:$Vq,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,69:$Vr,82:$Vs,84:$Vt,85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy},{12:54,19:57,23:136,25:$Vp,27:$Vq,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,69:$Vr,82:$Vs,84:$Vt,85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy},{12:54,19:57,23:137,25:$Vp,27:$Vq,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,69:$Vr,82:$Vs,84:$Vt,85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy},{12:54,19:57,23:138,25:$Vp,27:$Vq,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,69:$Vr,82:$Vs,84:$Vt,85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy},{12:54,19:57,23:139,25:$Vp,27:$Vq,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,69:$Vr,82:$Vs,84:$Vt,85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy},{12:54,19:57,23:140,25:$Vp,27:$Vq,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,69:$Vr,82:$Vs,84:$Vt,85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy},{12:54,19:57,23:141,25:$Vp,27:$Vq,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,69:$Vr,82:$Vs,84:$Vt,85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy},{12:54,19:57,23:142,25:$Vp,27:$Vq,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,69:$Vr,82:$Vs,84:$Vt,85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy},{12:54,19:57,23:143,25:$Vp,27:$Vq,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,69:$Vr,82:$Vs,84:$Vt,85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy},{12:54,19:57,23:144,25:$Vp,27:$Vq,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,69:$Vr,82:$Vs,84:$Vt,85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy},{12:54,19:57,23:145,25:$Vp,27:$Vq,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,69:$Vr,82:$Vs,84:$Vt,85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy},{12:54,19:57,23:146,25:$Vp,27:$Vq,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,69:$Vr,82:$Vs,84:$Vt,85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy},o($VS,[2,79]),{28:[1,147],68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,83:$VR},o($VU,[2,90],{68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO}),{12:54,19:57,23:148,25:$Vp,27:$Vq,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,69:$Vr,82:$Vs,84:$Vt,85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy},{12:54,19:57,23:149,25:$Vp,27:[1,150],55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,69:$Vr,82:$Vs,84:$Vt,85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy},{24:153,28:[1,152],52:151,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm},{25:[1,154]},{8:[2,25],68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,83:$VR},{30:[1,155],68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,83:$VR},{28:[1,156],54:$VV},o($VS,[2,56]),o($VW,[2,66],{68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,83:$VR}),{28:[1,158],68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,83:$VR},{28:[1,159],68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,83:$VR},{28:[1,160],68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,83:$VR},{8:[1,161]},{25:[1,162]},{26:[1,163]},{28:[1,164],68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,83:$VR},{6:42,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,21:$V1,22:$V2,24:20,25:$V3,34:[1,165],37:$V4,38:$V5,40:$V6,47:$V7,50:$V8,51:$V9,53:$Va,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn},{24:153,28:[1,167],52:166,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm},{28:[1,168],68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,83:$VR},{28:[1,169],68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,83:$VR},{28:[1,170],68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,83:$VR},{28:[1,171],68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,83:$VR},{28:[1,172],68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,83:$VR},{28:[1,173],68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,83:$VR},{28:[1,174],68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,83:$VR},o($VX,[2,73],{70:$VF,71:$VG,72:$VH,73:$VI}),o($VX,[2,74],{70:$VF,71:$VG,72:$VH,73:$VI}),o($VY,[2,75],{72:$VH}),o($VY,[2,76],{72:$VH}),o($VY,[2,77],{72:$VH}),o($VY,[2,78],{72:$VH}),o($VZ,[2,82],{68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI}),o($VZ,[2,83],{68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI}),o($VZ,[2,84],{68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI}),o($VZ,[2,85],{68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI}),o($VZ,[2,86],{68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI}),o($VZ,[2,87],{68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI}),o($VU,[2,88],{68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO}),o([8,28,30,34,45,54,81,83],[2,89],{68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP}),{45:[1,175],68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,83:$VR},o($VS,[2,81]),{30:[1,176],68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,83:$VR},{8:[2,20],68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,83:$VR},{12:54,19:57,23:105,24:177,25:$Vp,27:$Vq,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,69:$Vr,82:$Vs,84:$Vt,85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy},{28:[1,178],54:$V_},{32:[1,180]},{25:[1,181]},{26:[1,182]},{8:$V$,26:[1,183]},o($VS,[2,55]),{12:54,19:57,23:184,25:$Vp,27:$Vq,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,69:$Vr,82:$Vs,84:$Vt,85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy},{8:[2,29]},{32:[1,185]},{32:[1,186]},{12:54,19:57,23:187,25:$Vp,27:$Vq,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,69:$Vr,82:$Vs,84:$Vt,85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy},{26:[1,188]},{12:54,19:57,23:189,25:$Vp,27:$Vq,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,69:$Vr,82:$Vs,84:$Vt,85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy},{32:[1,190]},{50:[1,191]},{28:[1,192],54:$V_},{32:[1,193]},o($VS,[2,58]),o($VS,[2,59]),o($VS,[2,60]),o($VS,[2,61]),o($VS,[2,62]),o($VS,[2,63]),o($VS,[2,64]),{12:54,19:57,23:194,25:$Vp,27:$Vq,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,69:$Vr,82:$Vs,84:$Vt,85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy},o($VS,$V$),{28:[1,195]},{32:[1,196]},{24:197,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm},{4:198,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,21:$V1,22:$V2,24:20,25:$V3,37:$V4,38:$V5,40:$V6,47:$V7,50:$V8,51:$V9,53:$Va,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn},o($V01,[2,54]),{31:[1,199],32:[1,200]},{12:54,19:57,23:201,25:$Vp,27:$Vq,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,69:$Vr,82:$Vs,84:$Vt,85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy},o($VW,[2,65],{68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,83:$VR}),{4:202,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,21:$V1,22:$V2,24:20,25:$V3,37:$V4,38:$V5,40:$V6,47:$V7,50:$V8,51:$V9,53:$Va,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn},{41:203,42:204,43:205,44:$V11,46:$V21},{8:[1,208],68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,83:$VR},{12:54,19:57,23:209,25:$Vp,27:$Vq,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,69:$Vr,82:$Vs,84:$Vt,85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy},{8:[2,42],68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,83:$VR},{4:210,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,21:$V1,22:$V2,24:20,25:$V3,37:$V4,38:$V5,40:$V6,47:$V7,50:$V8,51:$V9,53:$Va,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn},{27:[1,211]},{32:[1,212]},{4:213,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,21:$V1,22:$V2,24:20,25:$V3,37:$V4,38:$V5,40:$V6,47:$V7,50:$V8,51:$V9,53:$Va,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn},o([8,28,30,34,45,54,83],[2,91],{68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ}),{12:54,19:57,23:214,25:$Vp,27:$Vq,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,69:$Vr,82:$Vs,84:$Vt,85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy},{4:215,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,21:$V1,22:$V2,24:20,25:$V3,37:$V4,38:$V5,40:$V6,47:$V7,50:$V8,51:$V9,53:$Va,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn},{25:[1,216]},{6:42,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,21:$V1,22:$V2,24:20,25:$V3,34:[1,217],37:$V4,38:$V5,40:$V6,47:$V7,50:$V8,51:$V9,53:$Va,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn},{24:218,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm},{12:54,19:57,23:115,25:$Vp,27:$Vq,33:219,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,69:$Vr,82:$Vs,84:$Vt,85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy},{8:[2,26],68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,83:$VR},{6:42,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,21:$V1,22:$V2,24:20,25:$V3,34:[1,220],37:$V4,38:$V5,40:$V6,47:$V7,50:$V8,51:$V9,53:$Va,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn},{34:[1,221],42:222,43:223,44:$V11,46:$V21},{34:[1,224]},o($V31,[2,37]),{45:[1,225]},{12:54,19:57,23:226,25:$Vp,27:$Vq,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,69:$Vr,82:$Vs,84:$Vt,85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy},{25:[1,228],49:227},{8:[2,41],68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,83:$VR},{6:42,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,21:$V1,22:$V2,24:20,25:$V3,34:[1,229],37:$V4,38:$V5,40:$V6,47:$V7,50:$V8,51:$V9,53:$Va,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn},{12:54,19:57,23:230,25:$Vp,27:$Vq,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,69:$Vr,82:$Vs,84:$Vt,85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy},{4:231,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,21:$V1,22:$V2,24:20,25:$V3,37:$V4,38:$V5,40:$V6,47:$V7,50:$V8,51:$V9,53:$Va,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn},{6:42,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,21:$V1,22:$V2,24:20,25:$V3,34:[1,232],37:$V4,38:$V5,40:$V6,47:$V7,50:$V8,51:$V9,53:$Va,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn},{8:[2,22],68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,83:$VR},{6:42,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,21:$V1,22:$V2,24:20,25:$V3,34:[1,233],37:$V4,38:$V5,40:$V6,47:$V7,50:$V8,51:$V9,53:$Va,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn},o($V01,[2,53]),o($Vo,[2,50]),{29:[1,234]},{34:[1,235],54:$VV},o($Vo,[2,30],{39:[1,236]}),o($Vo,[2,33]),{34:[1,237]},o($V31,[2,36]),o($Vo,[2,35]),{4:238,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,21:$V1,22:$V2,24:20,25:$V3,37:$V4,38:$V5,40:$V6,47:$V7,50:$V8,51:$V9,53:$Va,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn},{45:[1,239],68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,83:$VR},{28:[1,240]},{26:[1,243],35:[1,241],36:[1,242]},o($Vo,[2,47]),{28:[1,244],68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,83:$VR},{6:42,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,21:$V1,22:$V2,24:20,25:$V3,34:[1,245],37:$V4,38:$V5,40:$V6,47:$V7,50:$V8,51:$V9,53:$Va,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn},o($Vo,[2,52]),o($Vo,[2,49]),{12:54,19:57,23:246,25:$Vp,27:$Vq,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,69:$Vr,82:$Vs,84:$Vt,85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy},{8:[2,24]},{13:248,32:[1,247],38:$V5},o($Vo,[2,34]),{6:42,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,21:$V1,22:$V2,24:20,25:$V3,34:[2,39],37:$V4,38:$V5,40:$V6,47:$V7,50:$V8,51:$V9,53:$Va,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn},{4:249,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,21:$V1,22:$V2,24:20,25:$V3,37:$V4,38:$V5,40:$V6,47:$V7,50:$V8,51:$V9,53:$Va,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn},{32:[1,250]},{28:[2,44]},{28:[2,45]},{12:54,19:57,23:251,25:$Vp,27:$Vq,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,69:$Vr,82:$Vs,84:$Vt,85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy},{8:[1,252]},o($Vo,[2,51]),{30:[1,253],68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,83:$VR},{4:254,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,21:$V1,22:$V2,24:20,25:$V3,37:$V4,38:$V5,40:$V6,47:$V7,50:$V8,51:$V9,53:$Va,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn},o($Vo,[2,32]),o($V31,[2,38],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,24:20,6:42,20:$V0,21:$V1,22:$V2,25:$V3,37:$V4,38:$V5,40:$V6,47:$V7,50:$V8,51:$V9,53:$Va,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn}),{4:255,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,21:$V1,22:$V2,24:20,25:$V3,37:$V4,38:$V5,40:$V6,47:$V7,50:$V8,51:$V9,53:$Va,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn},{28:[2,46],68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,83:$VR},o($Vo,[2,48]),{8:[2,23]},{6:42,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,21:$V1,22:$V2,24:20,25:$V3,34:[1,256],37:$V4,38:$V5,40:$V6,47:$V7,50:$V8,51:$V9,53:$Va,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn},{6:42,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,21:$V1,22:$V2,24:20,25:$V3,34:[1,257],37:$V4,38:$V5,40:$V6,47:$V7,50:$V8,51:$V9,53:$Va,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,67:$Vn},o($Vo,[2,31]),o($Vo,[2,40])];
    defaultActions: {[key:number]: any} = {41:[2,1],65:[2,72],158:[2,29],235:[2,24],241:[2,44],242:[2,45],253:[2,23]};

    performAction (yytext:string, yyleng:number, yylineno:number, yy:any, yystate:number /* action[1] */, $$:any /* vstack */, _$:any /* lstack */): any {
/* this == yyval */
          var $0 = $$.length - 1;
        switch (yystate) {
case 1:

      let root = new AST($$[$0-1]);
      this.$ = root;
      return this.$;
    
break;
case 2:

            $$[$0-1].push($$[$0]);
            this.$ = $$[$0-1];
          
break;
case 3:

            let arr = [];
            arr.push($$[$0]);
            this.$ = arr;
          
break;
case 4: case 5: case 6: case 7: case 8: case 15: case 81:
 this.$ = $$[$0-1]; 
break;
case 9: case 10: case 11: case 12: case 13: case 14: case 80: case 92:
 this.$ = $$[$0]; 
break;
case 16:
 this.$ = new Break(); 
break;
case 17:
 this.$ = new Continue(); 
break;
case 18:
 this.$ = new Return(null); 
break;
case 19:
 this.$ = new Return($$[$0-1]); 
break;
case 20:

              this.$ = new VariableDeclaration($$[$0-3], $$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
            
break;
case 21:

              this.$ = new VariableDeclaration($$[$0-1], $$[$0], null, _$[$0-1].first_line, _$[$0-1].first_column);
            
break;
case 22:

              this.$ = new Cast($$[$0-6], $$[$0-5], $$[$0], $$[$0-2] ,_$[$0-6].first_line, _$[$0-6].first_column);
            
break;
case 23:

              this.$ = new Vector(1, $$[$0-9],$$[$0-6],$$[$0-1],null, _$[$0-9].first_line, _$[$0-9].first_column);
            
break;
case 24:

              this.$ = new Vector(2, $$[$0-7],$$[$0-4],null,$$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column);
            
break;
case 25:

              this.$ = new Assigment($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
            
break;
case 26:

              this.$ = new ModifyVector($$[$0-5], $$[$0-3], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
            
break;
case 27: case 44:
 this.$ = new Assigment($$[$0-1],new Arithmetic(new Identifier($$[$0-1],_$[$0-1].first_line, _$[$0-1].first_column),new Primitive(1, "INTEGER", _$[$0-1].first_line, _$[$0-1].first_column),false,_$[$0-1].first_line, _$[$0-1].first_column,"+"),_$[$0-1].first_line, _$[$0-1].first_column ); 
break;
case 28:
 this.$ = new Assigment($$[$0-1],new Arithmetic(new Identifier($$[$0-1],_$[$0-1].first_line, _$[$0-1].first_column),new Primitive(1, "INTEGER", _$[$0-1].first_line, _$[$0-1].first_column),false,_$[$0-1].first_line, _$[$0-1].first_column,"-"),_$[$0-1].first_line, _$[$0-1].first_column ); 
break;
case 29:
 this.$ = new Print($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 30:
 this.$ = new IF($$[$0-4],$$[$0-1],[],_$[$0-6].first_line, _$[$0-6].last_column);
break;
case 31:
 this.$ = new IF($$[$0-8],$$[$0-5],$$[$0-1],_$[$0-10].first_line, _$[$0-10].last_column);
break;
case 32:
 this.$ = new IF($$[$0-6],$$[$0-3],[$$[$0]],_$[$0-8].first_line, _$[$0-8].last_column);
break;
case 33:
 this.$ = new Switch($$[$0-4],$$[$0-1],null,_$[$0-6].first_line, _$[$0-6].last_column); 
break;
case 34:
 this.$ = new Switch($$[$0-5],$$[$0-2],$$[$0-1],_$[$0-7].first_line, _$[$0-7].last_column); 
break;
case 35:
 this.$ = new Switch($$[$0-4],[],$$[$0-1],_$[$0-6].first_line, _$[$0-6].last_column); 
break;
case 36:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 37:
 let arrCase = []; arrCase.push($$[$0]); this.$ = arrCase; 
break;
case 38:
 this.$ = new Case($$[$0-2],$$[$0],_$[$0-3].first_line, _$[$0-3].last_column); 
break;
case 39:
 this.$ = new Case(null,$$[$0],_$[$0-2].first_line, _$[$0-2].last_column); 
break;
case 40:
 this.$ = new For($$[$0-8],$$[$0-6],$$[$0-4],$$[$0-1],_$[$0-10].first_line, _$[$0-10].last_column); 
break;
case 41:
 this.$ = new VariableDeclaration($$[$0-3], $$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 42: case 46:
 this.$ = new Assigment($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 43:
 this.$ = null; 
break;
case 45:
 this.$ = new Assigment($$[$0-1],new Arithmetic(new Identifier($$[$0-1],_$[$0-1].first_line, _$[$0-1].first_column),new Primitive(1, "INTEGER", _$[$0-1].first_line, _$[$0-1].first_column),false,_$[$0-1].first_line, _$[$0-1].first_column,"-"),_$[$0-1].first_line, _$[$0-1].first_column );
break;
case 47:
 this.$ = new While($$[$0-4],$$[$0-1],_$[$0-6].first_line, _$[$0-6].last_column); 
break;
case 48:
 this.$ = new DoWhile($$[$0-6],$$[$0-2],_$[$0-8].first_line, _$[$0-8].last_column); 
break;
case 49:
 this.$ = new Function(2,$$[$0-7],$$[$0-6],$$[$0-4],false,$$[$0-1],_$[$0-7].first_line, _$[$0-7].last_column); 
break;
case 50:
 this.$ = new Function(2,$$[$0-6],$$[$0-5],[],false,$$[$0-1],_$[$0-6].first_line, _$[$0-6].last_column); 
break;
case 51:
 this.$ = new Function(3,$$[$0-7],$$[$0-6],$$[$0-4],true,$$[$0-1],_$[$0-7].first_line, _$[$0-7].last_column); 
break;
case 52:
 this.$ = new Function(3,$$[$0-6],$$[$0-5],[],true,$$[$0-1],_$[$0-6].first_line, _$[$0-6].last_column); 
break;
case 53:
this.$ = $$[$0-3]; this.$.push(new Symbol(6, $$[$0-1], $$[$0], null))
break;
case 54:
this.$ = []; this.$.push(new Symbol(6, $$[$0-1], $$[$0], null))
break;
case 55:
 this.$ = new Callback($$[$0-3],$$[$0-1],_$[$0-3].first_line, _$[$0-3].last_column); 
break;
case 56:
 this.$ = new Callback($$[$0-2],[],_$[$0-2].first_line, _$[$0-2].last_column); 
break;
case 57:
 this.$ = new AccessVector($$[$0-3],$$[$0-1],_$[$0-3].first_line, _$[$0-3].last_column); 
break;
case 58:
this.$ = new ToLower($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column);
break;
case 59:
this.$ = new ToUpper($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column);
break;
case 60:
this.$ = new ToString($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column);
break;
case 61:
this.$ = new Truncate($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column);
break;
case 62:
this.$ = new Round($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column);
break;
case 63:
this.$ = new Typeof($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column);
break;
case 64:
this.$ = new Length($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column);
break;
case 65:

            this.$ = $$[$0-2];
            this.$.push($$[$0]);
           
break;
case 66:

            this.$ = [];
            this.$.push($$[$0]);
           
break;
case 67:
 this.$ = new Type("INTEGER");
break;
case 68:
 this.$ = new Type("DOUBLE");
break;
case 69:
 this.$ = new Type("BOOLEAN");
break;
case 70:
 this.$ = new Type("CHAR");
break;
case 71:
 this.$ = new Type("STRING");
break;
case 72:
 this.$ = new Main($$[$0],_$[$0-1].first_line, _$[$0-1].last_column); 
break;
case 73:
 this.$ = new Arithmetic($$[$0-2],$$[$0],false,_$[$0-2].first_line, _$[$0-2].first_column,"+"); 
break;
case 74:
 this.$ = new Arithmetic($$[$0-2],$$[$0],false,_$[$0-2].first_line, _$[$0-2].first_column,"-"); 
break;
case 75:
 this.$ = new Arithmetic($$[$0-2],$$[$0],false,_$[$0-2].first_line, _$[$0-2].first_column,"*"); 
break;
case 76:
 this.$ = new Arithmetic($$[$0-2],$$[$0],false,_$[$0-2].first_line, _$[$0-2].first_column,"/");
break;
case 77:
 this.$ = new Arithmetic($$[$0-2],$$[$0],false,_$[$0-2].first_line, _$[$0-2].first_column,"^"); 
break;
case 78:
 this.$ = new Arithmetic($$[$0-2],$$[$0],false,_$[$0-2].first_line, _$[$0-2].first_column,"%"); 
break;
case 79:
 this.$ = new Arithmetic($$[$0],null,true,_$[$0-1].first_line, _$[$0-1].first_column,"UNARY"); 
break;
case 82:
 this.$ = new Relational($$[$0-2],$$[$0],false,_$[$0-2].first_line, _$[$0-2].first_column,"=="); 
break;
case 83:
 this.$ = new Relational($$[$0-2],$$[$0],false,_$[$0-2].first_line, _$[$0-2].first_column,"!="); 
break;
case 84:
 this.$ = new Relational($$[$0-2],$$[$0],false,_$[$0-2].first_line, _$[$0-2].first_column,"<="); 
break;
case 85:
 this.$ = new Relational($$[$0-2],$$[$0],false,_$[$0-2].first_line, _$[$0-2].first_column,">="); 
break;
case 86:
 this.$ = new Relational($$[$0-2],$$[$0],false,_$[$0-2].first_line, _$[$0-2].first_column,"<"); 
break;
case 87:
 this.$ = new Relational($$[$0-2],$$[$0],false,_$[$0-2].first_line, _$[$0-2].first_column,">"); 
break;
case 88:
 this.$ = new Logic($$[$0-2],$$[$0],false,_$[$0-2].first_line, _$[$0-2].first_column,"&&"); 
break;
case 89:
 this.$ = new Logic($$[$0-2],$$[$0],false,_$[$0-2].first_line, _$[$0-2].first_column,"||"); 
break;
case 90:
 this.$ = new Logic($$[$0],null,true,_$[$0-1].first_line, _$[$0-1].first_column,"!"); 
break;
case 91:
 this.$ = new TernaryOperator($$[$0-4],$$[$0-2],$$[$0],_$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 93:
 this.$ = new Identifier($$[$0],_$[$0].first_line, _$[$0].first_column);
break;
case 94:
 this.$ = new Primitive(parseInt($$[$0]), "INTEGER", _$[$0].first_line, _$[$0].first_column);
break;
case 95:
 this.$ = new Primitive(parseFloat($$[$0]), "DOUBLE", _$[$0].first_line, _$[$0].first_column);
break;
case 96:
 this.$ = new Primitive($$[$0], "STRING", _$[$0].first_line, _$[$0].first_column);
break;
case 97:
 this.$ = new Primitive($$[$0], "CHAR", _$[$0].first_line, _$[$0].first_column);
break;
case 98:
 this.$ = new Primitive(true, "BOOLEAN", _$[$0].first_line, _$[$0].first_column);
break;
case 99:
 this.$ = new Primitive(false, "BOOLEAN", _$[$0].first_line, _$[$0].first_column);
break;
        }
    }
}


/* generated by ts-jison-lex 0.3.0 */
import { JisonLexer, JisonLexerApi } from '@ts-jison/lexer';
export class AnalyzerLexer extends JisonLexer implements JisonLexerApi {
    options: any = {"case-insensitive":true,"moduleName":"Analyzer"};
    constructor (yy = {}) {
        super(yy);
    }

    rules: RegExp[] = [/^(?:\s+)/i,/^(?:(\/\/).*)/i,/^(?:[ \r\t])/i,/^(?:\n)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:new\b)/i,/^(?:list\b)/i,/^(?:add\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:print\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:length\b)/i,/^(?:truncate\b)/i,/^(?:round\b)/i,/^(?:typeof\b)/i,/^(?:toString\b)/i,/^(?:toCharArray\b)/i,/^(?:main\b)/i,/^(?:void\b)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:\?)/i,/^(?::)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:=)/i,/^(?:\$)/i,/^(?:;)/i,/^(?:,)/i,/^(?:\.)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:([a-zA-ZÑñ]|(_[a-zA-ZÑñ]))([a-zA-ZÑñ]|[0-9]|_)*)/i,/^(?:'(?:(\\)["bfnrt/(\\)]|(\\)u[a-fA-F0-9]{4}|[^"(\\)])')/i,/^(?:((?:[0-9]|[1-9][0-9]+))((?:\.[0-9]+))\b)/i,/^(?:((?:[0-9]|[1-9][0-9]+))\b)/i,/^(?:"(?:[{cor1}|{cor2}]|["\\"]["bnrt/["\\"]|[^"["\\"])*")/i,/^(?:$)/i,/^(?:.)/i];
    conditions: any = {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73],"inclusive":true}}
    performAction (yy:any,yy_:any,$avoiding_name_collisions:any,YY_START:any): any {
          var YYSTATE=YY_START;
        switch($avoiding_name_collisions) {
    case 0:/* skip whitespace */
      break;
    case 1:/* line comment */
      break;
    case 2:/* white space */
      break;
    case 3:/* white space */
      break;
    case 4:/* multi comment */
      break;
    case 5: return 62; 
      break;
    case 6: return 63; 
      break;
    case 7: return 64; 
      break;
    case 8: return 65; 
      break;
    case 9: return 66; 
      break;
    case 10: return 88; 
      break;
    case 11: return 89; 
      break;
    case 12: return 31; 
      break;
    case 13: return 't_list'; 
      break;
    case 14: return 't_add'; 
      break;
    case 15: return 38; 
      break;
    case 16: return 39; 
      break;
    case 17: return 40; 
      break;
    case 18: return 44; 
      break;
    case 19: return 46; 
      break;
    case 20: return 50; 
      break;
    case 21: return 47; 
      break;
    case 22: return 51; 
      break;
    case 23: return 20; 
      break;
    case 24: return 21; 
      break;
    case 25: return 22; 
      break;
    case 26: return 37; 
      break;
    case 27: return 55; 
      break;
    case 28: return 56; 
      break;
    case 29: return 61; 
      break;
    case 30: return 58; 
      break;
    case 31: return 59; 
      break;
    case 32: return 60; 
      break;
    case 33: return 57; 
      break;
    case 34: return 't_toCharArray'; 
      break;
    case 35: return 67; 
      break;
    case 36: return 53; 
      break;
    case 37:return 35;
      break;
    case 38:return 36;
      break;
    case 39:return 68;
      break;
    case 40:return 69;
      break;
    case 41:return 70;
      break;
    case 42:return 71;
      break;
    case 43:return 72;
      break;
    case 44:return 73;
      break;
    case 45:return 76;
      break;
    case 46:return 77;
      break;
    case 47:return 74;
      break;
    case 48:return 75;
      break;
    case 49:return 78;
      break;
    case 50:return 79;
      break;
    case 51:return 83;
      break;
    case 52:return 45;
      break;
    case 53:return 81;
      break;
    case 54:return 80;
      break;
    case 55:return 82;
      break;
    case 56:return 27;
      break;
    case 57:return 28;
      break;
    case 58:return 26;
      break;
    case 59:return '$';
      break;
    case 60:return 8;
      break;
    case 61:return 54;
      break;
    case 62:return '.';
      break;
    case 63:return 32;
      break;
    case 64:return 34;
      break;
    case 65:return 29;
      break;
    case 66:return 30;
      break;
    case 67:yy_.yytext = yy_.yytext.toLowerCase();          return 25;
      break;
    case 68:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);     return 87// substr to remove the quotes
      break;
    case 69:return 85
      break;
    case 70:return 84
      break;
    case 71:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);     return 86;
      break;
    case 72: return 5; 
      break;
    case 73:console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
      break;
        }
    }
}

