/* parser generated by jison 0.3.0 */
/**
 * Returns a Parser implementing JisonParserApi and a Lexer implementing JisonLexerApi.
 */

  import { AST } from '../AST/AST';
  import { Type } from '../TableSymbols/Type';
  // main
  import { Main } from '../Instructions/Main';
  // INSTRUCTIONS
  import { VariableDeclaration } from '../Instructions/Declaration';
  import { Assigment } from '../Instructions/Assigment';
  import { Print } from '../Instructions/Print';
  import { Cast } from '../Instructions/Cast';
  import { IF } from '../Instructions/ControlSentences/IF';
  import { For } from '../Instructions/LoopSentences/For';
  import { While } from '../Instructions/LoopSentences/While';
  import { DoWhile } from '../Instructions/LoopSentences/DoWhile';
  import { Switch } from '../Instructions/ControlSentences/Switch';
  import { Case } from '../Instructions/ControlSentences/Case';
  import { Break } from '../Instructions/TransferSentences/Break';
  import { Continue } from '../Instructions/TransferSentences/Continue';
  import { Return } from '../Instructions/TransferSentences/Return';
  import { Function } from '../Instructions/Function';
  import { Callback } from '../Instructions/Callback';
  // EXPRESSIONS
  import { Identifier } from '../Expressions/Identifier';
  import { Primitive } from '../Expressions/Primitive';
  import { TernaryOperator } from '../Expressions/TernaryOperator';
  import { Arithmetic } from '../Expressions/Operations/Arithmetic';
  import { Logic } from '../Expressions/Operations/Logic';
  import { Relational } from '../Expressions/Operations/Relational';
  // natives
  import { ToLower } from '../Expressions/Natives/ToLower';
  import { ToUpper } from '../Expressions/Natives/ToUpper';
  import { ToString } from '../Expressions/Natives/ToString';
  import { Truncate } from '../Expressions/Natives/Truncate';
  import { Round } from '../Expressions/Natives/Round';
  import { Typeof } from '../Expressions/Natives/Typeof';
  import { Length } from '../Expressions/Natives/Length';
  // SYmbol
  import { Symbol } from '../TableSymbols/Symbol';


import { JisonParser, JisonParserApi, StateType, SymbolsType, TerminalsType, ProductionsType, o } from '@ts-jison/parser';const $V0=[1,16],$V1=[1,17],$V2=[1,18],$V3=[1,21],$V4=[1,22],$V5=[1,23],$V6=[1,24],$V7=[1,25],$V8=[1,26],$V9=[1,27],$Va=[1,28],$Vb=[1,29],$Vc=[1,30],$Vd=[1,31],$Ve=[1,32],$Vf=[1,33],$Vg=[1,34],$Vh=[1,35],$Vi=[1,36],$Vj=[1,37],$Vk=[1,38],$Vl=[1,39],$Vm=[1,40],$Vn=[1,19],$Vo=[5,20,21,22,25,31,32,34,36,40,42,43,46,47,49,52,53,54,55,56,57,58,59,60,61,62,63,64],$Vp=[1,58],$Vq=[1,55],$Vr=[1,53],$Vs=[1,56],$Vt=[1,59],$Vu=[1,60],$Vv=[1,61],$Vw=[1,62],$Vx=[1,63],$Vy=[1,64],$Vz=[1,71],$VA=[1,69],$VB=[1,70],$VC=[25,28],$VD=[1,87],$VE=[1,88],$VF=[1,89],$VG=[1,90],$VH=[1,91],$VI=[1,92],$VJ=[1,93],$VK=[1,94],$VL=[1,95],$VM=[1,96],$VN=[1,97],$VO=[1,98],$VP=[1,99],$VQ=[1,100],$VR=[1,101],$VS=[8,28,41,50,65,66,67,68,69,70,71,72,73,74,75,76,77,78,80],$VT=[8,28,41,50,71,72,73,74,75,76,77,78,80],$VU=[28,50],$VV=[8,28,41,50,67,68,69,70,71,72,73,74,75,76,77,78,80],$VW=[8,28,41,50,71,72,77,78,80],$VX=[1,170],$VY=[1,193],$VZ=[1,192],$V_=[34,40,42];

export class AnalyzerParser extends JisonParser implements JisonParserApi {
    $?: any;

    constructor (yy = {}, lexer = new AnalyzerLexer(yy)) {
      super(yy, lexer);
    }

    symbols_: SymbolsType = {"error":2,"INIT":3,"SENTENCES":4,"EOF":5,"SENTENCE":6,"MAIN":7,";":8,"DECLARATION":9,"ASSIGNMENT":10,"PRINT":11,"INCDEC":12,"IF":13,"SWITCH":14,"FOR":15,"WHILE":16,"DO_WHILE":17,"FUNCTION":18,"CALLBACK":19,"t_break":20,"t_continue":21,"t_return":22,"EXP":23,"TYPE":24,"id":25,"=":26,"(":27,")":28,"++":29,"--":30,"t_print":31,"t_if":32,"{":33,"}":34,"t_else":35,"t_switch":36,"CASE_LIST":37,"DEFAULT":38,"CASE":39,"t_case":40,":":41,"t_default":42,"t_for":43,"DEC_ASSING_FOR":44,"UPDATE_FOR":45,"t_while":46,"t_do":47,"LIST_PARAM":48,"t_void":49,",":50,"LISTEXP":51,"t_toLower":52,"t_toUpper":53,"t_toString":54,"t_truncate":55,"t_round":56,"t_typeof":57,"t_length":58,"tint":59,"tdouble":60,"tboolean":61,"tchar":62,"tstring":63,"t_main":64,"+":65,"-":66,"*":67,"/":68,"^":69,"%":70,"==":71,"!=":72,"<=":73,">=":74,"<":75,">":76,"&&":77,"||":78,"!":79,"?":80,"integer":81,"float":82,"words":83,"character":84,"t_true":85,"t_false":86,"$accept":0,"$end":1};
    terminals_: TerminalsType = {2:"error",5:"EOF",8:";",20:"t_break",21:"t_continue",22:"t_return",25:"id",26:"=",27:"(",28:")",29:"++",30:"--",31:"t_print",32:"t_if",33:"{",34:"}",35:"t_else",36:"t_switch",40:"t_case",41:":",42:"t_default",43:"t_for",46:"t_while",47:"t_do",49:"t_void",50:",",52:"t_toLower",53:"t_toUpper",54:"t_toString",55:"t_truncate",56:"t_round",57:"t_typeof",58:"t_length",59:"tint",60:"tdouble",61:"tboolean",62:"tchar",63:"tstring",64:"t_main",65:"+",66:"-",67:"*",68:"/",69:"^",70:"%",71:"==",72:"!=",73:"<=",74:">=",75:"<",76:">",77:"&&",78:"||",79:"!",80:"?",81:"integer",82:"float",83:"words",84:"character",85:"t_true",86:"t_false"};
    productions_: ProductionsType = [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,2],[6,3],[9,4],[9,2],[9,7],[10,3],[12,2],[12,2],[11,4],[13,7],[13,11],[13,9],[14,7],[14,8],[14,7],[37,2],[37,1],[39,4],[38,3],[15,11],[44,4],[44,3],[44,0],[45,2],[45,2],[45,3],[16,7],[17,9],[18,8],[18,7],[18,8],[18,7],[48,4],[48,2],[19,4],[19,3],[19,4],[19,4],[19,4],[19,4],[19,4],[19,4],[19,4],[51,3],[51,1],[24,1],[24,1],[24,1],[24,1],[24,1],[7,2],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,2],[23,1],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,2],[23,5],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1]];
    table: Array<StateType> = [{3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,21:$V1,22:$V2,24:20,25:$V3,31:$V4,32:$V5,36:$V6,43:$V7,46:$V8,47:$V9,49:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:$Vl,63:$Vm,64:$Vn},{1:[3]},{5:[1,41],6:42,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,21:$V1,22:$V2,24:20,25:$V3,31:$V4,32:$V5,36:$V6,43:$V7,46:$V8,47:$V9,49:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:$Vl,63:$Vm,64:$Vn},o($Vo,[2,3]),{8:[1,43]},{8:[1,44]},{8:[1,45]},{8:[1,46]},{8:[1,47]},o($Vo,[2,9]),o($Vo,[2,10]),o($Vo,[2,11]),o($Vo,[2,12]),o($Vo,[2,13]),o($Vo,[2,14]),{8:[1,48]},{8:[1,49]},{8:[1,50]},{8:[1,51],12:54,19:57,23:52,25:$Vp,27:$Vq,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,66:$Vr,79:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy},{19:65,25:[1,66],52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh},{25:[1,67]},{26:[1,68],27:$Vz,29:$VA,30:$VB},{27:[1,72]},{27:[1,73]},{27:[1,74]},{27:[1,75]},{27:[1,76]},{33:[1,77]},{25:[1,78]},{27:[1,79]},{27:[1,80]},{27:[1,81]},{27:[1,82]},{27:[1,83]},{27:[1,84]},{27:[1,85]},o($VC,[2,63]),o($VC,[2,64]),o($VC,[2,65]),o($VC,[2,66]),o($VC,[2,67]),{1:[2,1]},o($Vo,[2,2]),o($Vo,[2,4]),o($Vo,[2,5]),o($Vo,[2,6]),o($Vo,[2,7]),o($Vo,[2,8]),o($Vo,[2,15]),o($Vo,[2,16]),o($Vo,[2,17]),o($Vo,[2,18]),{8:[1,86],65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,80:$VR},{12:54,19:57,23:102,25:$Vp,27:$Vq,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,66:$Vr,79:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy},o($VS,[2,76]),{12:54,19:57,23:103,25:$Vp,27:$Vq,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,66:$Vr,79:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy},{12:54,19:57,23:104,25:$Vp,27:$Vq,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,66:$Vr,79:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy},o($VS,[2,88]),o($VS,[2,89],{27:$Vz,29:$VA,30:$VB}),o($VS,[2,90]),o($VS,[2,91]),o($VS,[2,92]),o($VS,[2,93]),o($VS,[2,94]),o($VS,[2,95]),{8:[2,68]},{27:$Vz},{8:[2,21],26:[1,105],27:[1,106]},{12:54,19:57,23:107,25:$Vp,27:$Vq,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,66:$Vr,79:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy},o($VS,[2,24]),o($VS,[2,25]),{12:54,19:57,23:110,25:$Vp,27:$Vq,28:[1,109],51:108,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,66:$Vr,79:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy},{12:54,19:57,23:111,25:$Vp,27:$Vq,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,66:$Vr,79:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy},{12:54,19:57,23:112,25:$Vp,27:$Vq,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,66:$Vr,79:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy},{12:54,19:57,23:113,25:$Vp,27:$Vq,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,66:$Vr,79:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy},{8:[2,40],24:115,25:[1,116],44:114,59:$Vi,60:$Vj,61:$Vk,62:$Vl,63:$Vm},{12:54,19:57,23:117,25:$Vp,27:$Vq,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,66:$Vr,79:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy},{4:118,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,21:$V1,22:$V2,24:20,25:$V3,31:$V4,32:$V5,36:$V6,43:$V7,46:$V8,47:$V9,49:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:$Vl,63:$Vm,64:$Vn},{27:[1,119]},{12:54,19:57,23:120,25:$Vp,27:$Vq,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,66:$Vr,79:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy},{12:54,19:57,23:121,25:$Vp,27:$Vq,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,66:$Vr,79:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy},{12:54,19:57,23:122,25:$Vp,27:$Vq,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,66:$Vr,79:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy},{12:54,19:57,23:123,25:$Vp,27:$Vq,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,66:$Vr,79:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy},{12:54,19:57,23:124,25:$Vp,27:$Vq,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,66:$Vr,79:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy},{12:54,19:57,23:125,25:$Vp,27:$Vq,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,66:$Vr,79:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy},{12:54,19:57,23:126,25:$Vp,27:$Vq,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,66:$Vr,79:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy},o($Vo,[2,19]),{12:54,19:57,23:127,25:$Vp,27:$Vq,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,66:$Vr,79:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy},{12:54,19:57,23:128,25:$Vp,27:$Vq,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,66:$Vr,79:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy},{12:54,19:57,23:129,25:$Vp,27:$Vq,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,66:$Vr,79:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy},{12:54,19:57,23:130,25:$Vp,27:$Vq,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,66:$Vr,79:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy},{12:54,19:57,23:131,25:$Vp,27:$Vq,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,66:$Vr,79:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy},{12:54,19:57,23:132,25:$Vp,27:$Vq,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,66:$Vr,79:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy},{12:54,19:57,23:133,25:$Vp,27:$Vq,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,66:$Vr,79:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy},{12:54,19:57,23:134,25:$Vp,27:$Vq,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,66:$Vr,79:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy},{12:54,19:57,23:135,25:$Vp,27:$Vq,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,66:$Vr,79:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy},{12:54,19:57,23:136,25:$Vp,27:$Vq,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,66:$Vr,79:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy},{12:54,19:57,23:137,25:$Vp,27:$Vq,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,66:$Vr,79:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy},{12:54,19:57,23:138,25:$Vp,27:$Vq,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,66:$Vr,79:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy},{12:54,19:57,23:139,25:$Vp,27:$Vq,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,66:$Vr,79:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy},{12:54,19:57,23:140,25:$Vp,27:$Vq,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,66:$Vr,79:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy},{12:54,19:57,23:141,25:$Vp,27:$Vq,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,66:$Vr,79:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy},o($VT,[2,75],{65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI}),{28:[1,142],65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,80:$VR},o($VT,[2,86],{65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI}),{12:54,19:57,23:143,25:$Vp,27:[1,144],52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,66:$Vr,79:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy},{24:147,28:[1,146],48:145,59:$Vi,60:$Vj,61:$Vk,62:$Vl,63:$Vm},{8:[2,23],65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,80:$VR},{28:[1,148],50:[1,149]},o($VS,[2,53]),o($VU,[2,62],{65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,80:$VR}),{28:[1,150],65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,80:$VR},{28:[1,151],65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,80:$VR},{28:[1,152],65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,80:$VR},{8:[1,153]},{25:[1,154]},{26:[1,155]},{28:[1,156],65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,80:$VR},{6:42,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,21:$V1,22:$V2,24:20,25:$V3,31:$V4,32:$V5,34:[1,157],36:$V6,43:$V7,46:$V8,47:$V9,49:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:$Vl,63:$Vm,64:$Vn},{24:147,28:[1,159],48:158,59:$Vi,60:$Vj,61:$Vk,62:$Vl,63:$Vm},{28:[1,160],65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,80:$VR},{28:[1,161],65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,80:$VR},{28:[1,162],65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,80:$VR},{28:[1,163],65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,80:$VR},{28:[1,164],65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,80:$VR},{28:[1,165],65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,80:$VR},{28:[1,166],65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,80:$VR},o($VS,[2,69]),o($VS,[2,70]),o($VV,[2,71],{65:$VD,66:$VE}),o($VV,[2,72],{65:$VD,66:$VE}),o($VT,[2,73],{65:$VD,66:$VE,67:$VF,68:$VG,70:$VI}),o($VV,[2,74],{65:$VD,66:$VE}),o($VW,[2,78],{65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,73:$VL,74:$VM,75:$VN,76:$VO}),o($VW,[2,79],{65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,73:$VL,74:$VM,75:$VN,76:$VO}),o($VT,[2,80],{65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI}),o($VT,[2,81],{65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI}),o($VT,[2,82],{65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI}),o($VT,[2,83],{65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI}),o([8,28,41,50,77,80],[2,84],{65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,78:$VQ}),o([8,28,41,50,77,78,80],[2,85],{65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO}),{41:[1,167],65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,80:$VR},o($VS,[2,77]),{8:[2,20],65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,80:$VR},{12:54,19:57,23:103,24:168,25:$Vp,27:$Vq,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:$Vl,63:$Vm,66:$Vr,79:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy},{28:[1,169],50:$VX},{33:[1,171]},{25:[1,172]},o($VS,[2,52]),{12:54,19:57,23:173,25:$Vp,27:$Vq,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,66:$Vr,79:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy},{8:[2,26]},{33:[1,174]},{33:[1,175]},{12:54,19:57,23:176,25:$Vp,27:$Vq,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,66:$Vr,79:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy},{26:[1,177]},{12:54,19:57,23:178,25:$Vp,27:$Vq,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,66:$Vr,79:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy},{33:[1,179]},{46:[1,180]},{28:[1,181],50:$VX},{33:[1,182]},o($VS,[2,54]),o($VS,[2,55]),o($VS,[2,56]),o($VS,[2,57]),o($VS,[2,58]),o($VS,[2,59]),o($VS,[2,60]),{12:54,19:57,23:183,25:$Vp,27:$Vq,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,66:$Vr,79:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy},{28:[1,184]},{33:[1,185]},{24:186,59:$Vi,60:$Vj,61:$Vk,62:$Vl,63:$Vm},{4:187,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,21:$V1,22:$V2,24:20,25:$V3,31:$V4,32:$V5,36:$V6,43:$V7,46:$V8,47:$V9,49:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:$Vl,63:$Vm,64:$Vn},o($VU,[2,51]),o($VU,[2,61],{65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,80:$VR}),{4:188,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,21:$V1,22:$V2,24:20,25:$V3,31:$V4,32:$V5,36:$V6,43:$V7,46:$V8,47:$V9,49:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:$Vl,63:$Vm,64:$Vn},{37:189,38:190,39:191,40:$VY,42:$VZ},{8:[1,194],65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,80:$VR},{12:54,19:57,23:195,25:$Vp,27:$Vq,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,66:$Vr,79:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy},{8:[2,39],65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,80:$VR},{4:196,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,21:$V1,22:$V2,24:20,25:$V3,31:$V4,32:$V5,36:$V6,43:$V7,46:$V8,47:$V9,49:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:$Vl,63:$Vm,64:$Vn},{27:[1,197]},{33:[1,198]},{4:199,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,21:$V1,22:$V2,24:20,25:$V3,31:$V4,32:$V5,36:$V6,43:$V7,46:$V8,47:$V9,49:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:$Vl,63:$Vm,64:$Vn},o([8,28,41,50,80],[2,87],{65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ}),{12:54,19:57,23:200,25:$Vp,27:$Vq,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,66:$Vr,79:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy},{4:201,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,21:$V1,22:$V2,24:20,25:$V3,31:$V4,32:$V5,36:$V6,43:$V7,46:$V8,47:$V9,49:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:$Vl,63:$Vm,64:$Vn},{25:[1,202]},{6:42,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,21:$V1,22:$V2,24:20,25:$V3,31:$V4,32:$V5,34:[1,203],36:$V6,43:$V7,46:$V8,47:$V9,49:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:$Vl,63:$Vm,64:$Vn},{6:42,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,21:$V1,22:$V2,24:20,25:$V3,31:$V4,32:$V5,34:[1,204],36:$V6,43:$V7,46:$V8,47:$V9,49:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:$Vl,63:$Vm,64:$Vn},{34:[1,205],38:206,39:207,40:$VY,42:$VZ},{34:[1,208]},o($V_,[2,34]),{41:[1,209]},{12:54,19:57,23:210,25:$Vp,27:$Vq,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,66:$Vr,79:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy},{25:[1,212],45:211},{8:[2,38],65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,80:$VR},{6:42,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,21:$V1,22:$V2,24:20,25:$V3,31:$V4,32:$V5,34:[1,213],36:$V6,43:$V7,46:$V8,47:$V9,49:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:$Vl,63:$Vm,64:$Vn},{12:54,19:57,23:214,25:$Vp,27:$Vq,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,66:$Vr,79:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy},{4:215,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,21:$V1,22:$V2,24:20,25:$V3,31:$V4,32:$V5,36:$V6,43:$V7,46:$V8,47:$V9,49:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:$Vl,63:$Vm,64:$Vn},{6:42,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,21:$V1,22:$V2,24:20,25:$V3,31:$V4,32:$V5,34:[1,216],36:$V6,43:$V7,46:$V8,47:$V9,49:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:$Vl,63:$Vm,64:$Vn},{8:[2,22],65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,80:$VR},{6:42,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,21:$V1,22:$V2,24:20,25:$V3,31:$V4,32:$V5,34:[1,217],36:$V6,43:$V7,46:$V8,47:$V9,49:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:$Vl,63:$Vm,64:$Vn},o($VU,[2,50]),o($Vo,[2,47]),o($Vo,[2,27],{35:[1,218]}),o($Vo,[2,30]),{34:[1,219]},o($V_,[2,33]),o($Vo,[2,32]),{4:220,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,21:$V1,22:$V2,24:20,25:$V3,31:$V4,32:$V5,36:$V6,43:$V7,46:$V8,47:$V9,49:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:$Vl,63:$Vm,64:$Vn},{41:[1,221],65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,80:$VR},{28:[1,222]},{26:[1,225],29:[1,223],30:[1,224]},o($Vo,[2,44]),{28:[1,226],65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,80:$VR},{6:42,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,21:$V1,22:$V2,24:20,25:$V3,31:$V4,32:$V5,34:[1,227],36:$V6,43:$V7,46:$V8,47:$V9,49:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:$Vl,63:$Vm,64:$Vn},o($Vo,[2,49]),o($Vo,[2,46]),{13:229,32:$V5,33:[1,228]},o($Vo,[2,31]),{6:42,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,21:$V1,22:$V2,24:20,25:$V3,31:$V4,32:$V5,34:[2,36],36:$V6,43:$V7,46:$V8,47:$V9,49:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:$Vl,63:$Vm,64:$Vn},{4:230,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,21:$V1,22:$V2,24:20,25:$V3,31:$V4,32:$V5,36:$V6,43:$V7,46:$V8,47:$V9,49:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:$Vl,63:$Vm,64:$Vn},{33:[1,231]},{28:[2,41]},{28:[2,42]},{12:54,19:57,23:232,25:$Vp,27:$Vq,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,66:$Vr,79:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy},{8:[1,233]},o($Vo,[2,48]),{4:234,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,21:$V1,22:$V2,24:20,25:$V3,31:$V4,32:$V5,36:$V6,43:$V7,46:$V8,47:$V9,49:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:$Vl,63:$Vm,64:$Vn},o($Vo,[2,29]),o($V_,[2,35],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,24:20,6:42,20:$V0,21:$V1,22:$V2,25:$V3,31:$V4,32:$V5,36:$V6,43:$V7,46:$V8,47:$V9,49:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:$Vl,63:$Vm,64:$Vn}),{4:235,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,21:$V1,22:$V2,24:20,25:$V3,31:$V4,32:$V5,36:$V6,43:$V7,46:$V8,47:$V9,49:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:$Vl,63:$Vm,64:$Vn},{28:[2,43],65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,80:$VR},o($Vo,[2,45]),{6:42,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,21:$V1,22:$V2,24:20,25:$V3,31:$V4,32:$V5,34:[1,236],36:$V6,43:$V7,46:$V8,47:$V9,49:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:$Vl,63:$Vm,64:$Vn},{6:42,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,21:$V1,22:$V2,24:20,25:$V3,31:$V4,32:$V5,34:[1,237],36:$V6,43:$V7,46:$V8,47:$V9,49:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:$Vl,63:$Vm,64:$Vn},o($Vo,[2,28]),o($Vo,[2,37])];
    defaultActions: {[key:number]: any} = {41:[2,1],65:[2,68],150:[2,26],223:[2,41],224:[2,42]};

    performAction (yytext:string, yyleng:number, yylineno:number, yy:any, yystate:number /* action[1] */, $$:any /* vstack */, _$:any /* lstack */): any {
/* this == yyval */
          var $0 = $$.length - 1;
        switch (yystate) {
case 1:

      let root = new AST($$[$0-1]);
      this.$ = root;
      return this.$;
    
break;
case 2:

            $$[$0-1].push($$[$0]);
            this.$ = $$[$0-1];
          
break;
case 3:

            let arr = [];
            arr.push($$[$0]);
            this.$ = arr;
          
break;
case 4: case 5: case 6: case 7: case 8: case 15: case 77:
 this.$ = $$[$0-1]; 
break;
case 9: case 10: case 11: case 12: case 13: case 14: case 76: case 88:
 this.$ = $$[$0]; 
break;
case 16:
 this.$ = new Break(); 
break;
case 17:
 this.$ = new Continue(); 
break;
case 18:
 this.$ = new Return(null); 
break;
case 19:
 this.$ = new Return($$[$0-1]); 
break;
case 20:

              this.$ = new VariableDeclaration($$[$0-3], $$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
            
break;
case 21:

              this.$ = new VariableDeclaration($$[$0-1], $$[$0], null, _$[$0-1].first_line, _$[$0-1].first_column);
            
break;
case 22:

              this.$ = new Cast($$[$0-6], $$[$0-5], $$[$0], $$[$0-2] ,_$[$0-6].first_line, _$[$0-6].first_column);
            
break;
case 23:

              this.$ = new Assigment($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
            
break;
case 24: case 41:
 this.$ = new Assigment($$[$0-1],new Arithmetic(new Identifier($$[$0-1],_$[$0-1].first_line, _$[$0-1].first_column),new Primitive(1, "INTEGER", _$[$0-1].first_line, _$[$0-1].first_column),false,_$[$0-1].first_line, _$[$0-1].first_column,"+"),_$[$0-1].first_line, _$[$0-1].first_column ); 
break;
case 25:
 this.$ = new Assigment($$[$0-1],new Arithmetic(new Identifier($$[$0-1],_$[$0-1].first_line, _$[$0-1].first_column),new Primitive(1, "INTEGER", _$[$0-1].first_line, _$[$0-1].first_column),false,_$[$0-1].first_line, _$[$0-1].first_column,"-"),_$[$0-1].first_line, _$[$0-1].first_column ); 
break;
case 26:
 this.$ = new Print($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 27:
 this.$ = new IF($$[$0-4],$$[$0-1],[],_$[$0-6].first_line, _$[$0-6].last_column);
break;
case 28:
 this.$ = new IF($$[$0-8],$$[$0-5],$$[$0-1],_$[$0-10].first_line, _$[$0-10].last_column);
break;
case 29:
 this.$ = new IF($$[$0-6],$$[$0-3],[$$[$0]],_$[$0-8].first_line, _$[$0-8].last_column);
break;
case 30:
 this.$ = new Switch($$[$0-4],$$[$0-1],null,_$[$0-6].first_line, _$[$0-6].last_column); 
break;
case 31:
 this.$ = new Switch($$[$0-5],$$[$0-2],$$[$0-1],_$[$0-7].first_line, _$[$0-7].last_column); 
break;
case 32:
 this.$ = new Switch($$[$0-4],[],$$[$0-1],_$[$0-6].first_line, _$[$0-6].last_column); 
break;
case 33:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 34:
 let arrCase = []; arrCase.push($$[$0]); this.$ = arrCase; 
break;
case 35:
 this.$ = new Case($$[$0-2],$$[$0],_$[$0-3].first_line, _$[$0-3].last_column); 
break;
case 36:
 this.$ = new Case(null,$$[$0],_$[$0-2].first_line, _$[$0-2].last_column); 
break;
case 37:
 this.$ = new For($$[$0-8],$$[$0-6],$$[$0-4],$$[$0-1],_$[$0-10].first_line, _$[$0-10].last_column); 
break;
case 38:
 this.$ = new VariableDeclaration($$[$0-3], $$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 39: case 43:
 this.$ = new Assigment($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 40:
 this.$ = null; 
break;
case 42:
 this.$ = new Assigment($$[$0-1],new Arithmetic(new Identifier($$[$0-1],_$[$0-1].first_line, _$[$0-1].first_column),new Primitive(1, "INTEGER", _$[$0-1].first_line, _$[$0-1].first_column),false,_$[$0-1].first_line, _$[$0-1].first_column,"-"),_$[$0-1].first_line, _$[$0-1].first_column );
break;
case 44:
 this.$ = new While($$[$0-4],$$[$0-1],_$[$0-6].first_line, _$[$0-6].last_column); 
break;
case 45:
 this.$ = new DoWhile($$[$0-6],$$[$0-2],_$[$0-8].first_line, _$[$0-8].last_column); 
break;
case 46:
 this.$ = new Function(2,$$[$0-7],$$[$0-6],$$[$0-4],false,$$[$0-1],_$[$0-7].first_line, _$[$0-7].last_column); 
break;
case 47:
 this.$ = new Function(2,$$[$0-6],$$[$0-5],[],false,$$[$0-1],_$[$0-6].first_line, _$[$0-6].last_column); 
break;
case 48:
 this.$ = new Function(3,$$[$0-7],$$[$0-6],$$[$0-4],true,$$[$0-1],_$[$0-7].first_line, _$[$0-7].last_column); 
break;
case 49:
 this.$ = new Function(3,$$[$0-6],$$[$0-5],[],true,$$[$0-1],_$[$0-6].first_line, _$[$0-6].last_column); 
break;
case 50:
this.$ = $$[$0-3]; this.$.push(new Symbol(6, $$[$0-1], $$[$0], null))
break;
case 51:
this.$ = []; this.$.push(new Symbol(6, $$[$0-1], $$[$0], null))
break;
case 52:
 this.$ = new Callback($$[$0-3],$$[$0-1],_$[$0-3].first_line, _$[$0-3].last_column); 
break;
case 53:
 this.$ = new Callback($$[$0-2],[],_$[$0-2].first_line, _$[$0-2].last_column); 
break;
case 54:
this.$ = new ToLower($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column);
break;
case 55:
this.$ = new ToUpper($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column);
break;
case 56:
this.$ = new ToString($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column);
break;
case 57:
this.$ = new Truncate($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column);
break;
case 58:
this.$ = new Round($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column);
break;
case 59:
this.$ = new Typeof($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column);
break;
case 60:
this.$ = new Length($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column);
break;
case 61:

            this.$ = $$[$0-2];
            this.$.push($$[$0]);
           
break;
case 62:

            this.$ = [];
            this.$.push($$[$0]);
           
break;
case 63:
 this.$ = new Type("INTEGER");
break;
case 64:
 this.$ = new Type("DOUBLE");
break;
case 65:
 this.$ = new Type("BOOLEAN");
break;
case 66:
 this.$ = new Type("CHAR");
break;
case 67:
 this.$ = new Type("STRING");
break;
case 68:
 this.$ = new Main($$[$0],_$[$0-1].first_line, _$[$0-1].last_column); 
break;
case 69:
 this.$ = new Arithmetic($$[$0-2],$$[$0],false,_$[$0-2].first_line, _$[$0-2].first_column,"+"); 
break;
case 70:
 this.$ = new Arithmetic($$[$0-2],$$[$0],false,_$[$0-2].first_line, _$[$0-2].first_column,"-"); 
break;
case 71:
 this.$ = new Arithmetic($$[$0-2],$$[$0],false,_$[$0-2].first_line, _$[$0-2].first_column,"*"); 
break;
case 72:
 this.$ = new Arithmetic($$[$0-2],$$[$0],false,_$[$0-2].first_line, _$[$0-2].first_column,"/");
break;
case 73:
 this.$ = new Arithmetic($$[$0-2],$$[$0],false,_$[$0-2].first_line, _$[$0-2].first_column,"^"); 
break;
case 74:
 this.$ = new Arithmetic($$[$0-2],$$[$0],false,_$[$0-2].first_line, _$[$0-2].first_column,"%"); 
break;
case 75:
 this.$ = new Arithmetic($$[$0],null,true,_$[$0-1].first_line, _$[$0-1].first_column,"UNARY"); 
break;
case 78:
 this.$ = new Relational($$[$0-2],$$[$0],false,_$[$0-2].first_line, _$[$0-2].first_column,"=="); 
break;
case 79:
 this.$ = new Relational($$[$0-2],$$[$0],false,_$[$0-2].first_line, _$[$0-2].first_column,"!="); 
break;
case 80:
 this.$ = new Relational($$[$0-2],$$[$0],false,_$[$0-2].first_line, _$[$0-2].first_column,"<="); 
break;
case 81:
 this.$ = new Relational($$[$0-2],$$[$0],false,_$[$0-2].first_line, _$[$0-2].first_column,">="); 
break;
case 82:
 this.$ = new Relational($$[$0-2],$$[$0],false,_$[$0-2].first_line, _$[$0-2].first_column,"<"); 
break;
case 83:
 this.$ = new Relational($$[$0-2],$$[$0],false,_$[$0-2].first_line, _$[$0-2].first_column,">"); 
break;
case 84:
 this.$ = new Logic($$[$0-2],$$[$0],false,_$[$0-2].first_line, _$[$0-2].first_column,"&&"); 
break;
case 85:
 this.$ = new Logic($$[$0-2],$$[$0],false,_$[$0-2].first_line, _$[$0-2].first_column,"||"); 
break;
case 86:
 this.$ = new Logic($$[$0],null,true,_$[$0-1].first_line, _$[$0-1].first_column,"!"); 
break;
case 87:
 this.$ = new TernaryOperator($$[$0-4],$$[$0-2],$$[$0],_$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 89:
 this.$ = new Identifier($$[$0],_$[$0].first_line, _$[$0].first_column);
break;
case 90:
 this.$ = new Primitive(parseInt($$[$0]), "INTEGER", _$[$0].first_line, _$[$0].first_column);
break;
case 91:
 this.$ = new Primitive(parseFloat($$[$0]), "DOUBLE", _$[$0].first_line, _$[$0].first_column);
break;
case 92:
 this.$ = new Primitive($$[$0], "STRING", _$[$0].first_line, _$[$0].first_column);
break;
case 93:
 this.$ = new Primitive($$[$0], "CHAR", _$[$0].first_line, _$[$0].first_column);
break;
case 94:
 this.$ = new Primitive(true, "BOOLEAN", _$[$0].first_line, _$[$0].first_column);
break;
case 95:
 this.$ = new Primitive(false, "BOOLEAN", _$[$0].first_line, _$[$0].first_column);
break;
        }
    }
}


/* generated by ts-jison-lex 0.3.0 */
import { JisonLexer, JisonLexerApi } from '@ts-jison/lexer';
export class AnalyzerLexer extends JisonLexer implements JisonLexerApi {
    options: any = {"case-insensitive":true,"moduleName":"Analyzer"};
    constructor (yy = {}) {
        super(yy);
    }

    rules: RegExp[] = [/^(?:\s+)/i,/^(?:(\/\/).*)/i,/^(?:[ \r\t])/i,/^(?:\n)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:new\b)/i,/^(?:list\b)/i,/^(?:add\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:print\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:length\b)/i,/^(?:truncate\b)/i,/^(?:round\b)/i,/^(?:typeof\b)/i,/^(?:toString\b)/i,/^(?:toCharArray\b)/i,/^(?:main\b)/i,/^(?:void\b)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:\?)/i,/^(?::)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:=)/i,/^(?:\$)/i,/^(?:;)/i,/^(?:,)/i,/^(?:\.)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:([a-zA-ZÑñ]|(_[a-zA-ZÑñ]))([a-zA-ZÑñ]|[0-9]|_)*)/i,/^(?:'(?:(\\)["bfnrt/(\\)]|(\\)u[a-fA-F0-9]{4}|[^"(\\)])')/i,/^(?:((?:[0-9]|[1-9][0-9]+))((?:\.[0-9]+))\b)/i,/^(?:((?:[0-9]|[1-9][0-9]+))\b)/i,/^(?:"(?:[{cor1}|{cor2}]|["\\"]["bnrt/["\\"]|[^"["\\"])*")/i,/^(?:$)/i,/^(?:.)/i];
    conditions: any = {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73],"inclusive":true}}
    performAction (yy:any,yy_:any,$avoiding_name_collisions:any,YY_START:any): any {
          var YYSTATE=YY_START;
        switch($avoiding_name_collisions) {
    case 0:/* skip whitespace */
      break;
    case 1:/* line comment */
      break;
    case 2:/* white space */
      break;
    case 3:/* white space */
      break;
    case 4:/* multi comment */
      break;
    case 5: return 59; 
      break;
    case 6: return 60; 
      break;
    case 7: return 61; 
      break;
    case 8: return 62; 
      break;
    case 9: return 63; 
      break;
    case 10: return 85; 
      break;
    case 11: return 86; 
      break;
    case 12: return 't_new'; 
      break;
    case 13: return 't_list'; 
      break;
    case 14: return 't_add'; 
      break;
    case 15: return 32; 
      break;
    case 16: return 35; 
      break;
    case 17: return 36; 
      break;
    case 18: return 40; 
      break;
    case 19: return 42; 
      break;
    case 20: return 46; 
      break;
    case 21: return 43; 
      break;
    case 22: return 47; 
      break;
    case 23: return 20; 
      break;
    case 24: return 21; 
      break;
    case 25: return 22; 
      break;
    case 26: return 31; 
      break;
    case 27: return 52; 
      break;
    case 28: return 53; 
      break;
    case 29: return 58; 
      break;
    case 30: return 55; 
      break;
    case 31: return 56; 
      break;
    case 32: return 57; 
      break;
    case 33: return 54; 
      break;
    case 34: return 't_toCharArray'; 
      break;
    case 35: return 64; 
      break;
    case 36: return 49; 
      break;
    case 37:return 29;
      break;
    case 38:return 30;
      break;
    case 39:return 65;
      break;
    case 40:return 66;
      break;
    case 41:return 67;
      break;
    case 42:return 68;
      break;
    case 43:return 69;
      break;
    case 44:return 70;
      break;
    case 45:return 73;
      break;
    case 46:return 74;
      break;
    case 47:return 71;
      break;
    case 48:return 72;
      break;
    case 49:return 75;
      break;
    case 50:return 76;
      break;
    case 51:return 80;
      break;
    case 52:return 41;
      break;
    case 53:return 78;
      break;
    case 54:return 77;
      break;
    case 55:return 79;
      break;
    case 56:return 27;
      break;
    case 57:return 28;
      break;
    case 58:return 26;
      break;
    case 59:return '$';
      break;
    case 60:return 8;
      break;
    case 61:return 50;
      break;
    case 62:return '.';
      break;
    case 63:return 33;
      break;
    case 64:return 34;
      break;
    case 65:return '[';
      break;
    case 66:return ']';
      break;
    case 67:yy_.yytext = yy_.yytext.toLowerCase();          return 25;
      break;
    case 68:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);     return 84// substr to remove the quotes
      break;
    case 69:return 82
      break;
    case 70:return 81
      break;
    case 71:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);     return 83;
      break;
    case 72: return 5; 
      break;
    case 73:console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
      break;
        }
    }
}

