/* parser generated by jison 0.3.0 */
/**
 * Returns a Parser implementing JisonParserApi and a Lexer implementing JisonLexerApi.
 */

  import { AST } from '../AST/AST';
  import { Type } from '../TableSymbols/Type';
  // INSTRUCTIONS
  import { VariableDeclaration } from '../Instructions/Declaration';
  import { Assigment } from '../Instructions/Assigment';
  import { Print } from '../Instructions/Print';
  // EXPRESSIONS
  import { Identifier } from '../Expressions/Identifier';
  import { Primitive } from '../Expressions/Primitive';
  import { TernaryOperator } from '../Expressions/TernaryOperator';
  import { Arithmetic } from '../Expressions/Operations/Arithmetic';

import { JisonParser, JisonParserApi, StateType, SymbolsType, TerminalsType, ProductionsType, o } from '@ts-jison/parser';const $V0=[1,8],$V1=[1,9],$V2=[1,10],$V3=[1,11],$V4=[1,12],$V5=[1,13],$V6=[1,14],$V7=[5,15,22,24,25,26,27,28],$V8=[15,19],$V9=[1,29],$Va=[1,26],$Vb=[1,25],$Vc=[1,27],$Vd=[1,30],$Ve=[1,31],$Vf=[1,32],$Vg=[1,33],$Vh=[1,34],$Vi=[1,35],$Vj=[1,39],$Vk=[1,40],$Vl=[1,41],$Vm=[1,42],$Vn=[1,43],$Vo=[1,44],$Vp=[1,45],$Vq=[1,46],$Vr=[1,47],$Vs=[1,48],$Vt=[1,49],$Vu=[1,50],$Vv=[1,51],$Vw=[1,52],$Vx=[1,53],$Vy=[8,19,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44],$Vz=[8,19,35,36,37,38,39,40,41,42,44],$VA=[8,19,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44],$VB=[8,19,31,32,33,34,35,36,37,38,39,40,41,42,44],$VC=[8,19,35,36,41,42,44];

export class AnalyzerParser extends JisonParser implements JisonParserApi {
    $?: any;

    constructor (yy = {}, lexer = new AnalyzerLexer(yy)) {
      super(yy, lexer);
    }

    symbols_: SymbolsType = {"error":2,"INIT":3,"SENTENCES":4,"EOF":5,"SENTENCE":6,"DECLARATION":7,";":8,"ASSIGNMENT":9,"PRINT":10,"SENTENCES_BLOCK":11,"{":12,"}":13,"TYPE":14,"id":15,"=":16,"EXP":17,"(":18,")":19,"LISTEXP":20,",":21,"t_print":22,"CALLBACK":23,"tint":24,"tdouble":25,"tboolean":26,"tchar":27,"tstring":28,"+":29,"-":30,"*":31,"/":32,"^":33,"%":34,"==":35,"!=":36,"<=":37,">=":38,"<":39,">":40,"&&":41,"||":42,"?":43,":":44,"!":45,"integer":46,"float":47,"words":48,"character":49,"t_true":50,"t_false":51,"$accept":0,"$end":1};
    terminals_: TerminalsType = {2:"error",5:"EOF",8:";",12:"{",13:"}",15:"id",16:"=",18:"(",19:")",21:",",22:"t_print",24:"tint",25:"tdouble",26:"tboolean",27:"tchar",28:"tstring",29:"+",30:"-",31:"*",32:"/",33:"^",34:"%",35:"==",36:"!=",37:"<=",38:">=",39:"<",40:">",41:"&&",42:"||",43:"?",44:":",45:"!",46:"integer",47:"float",48:"words",49:"character",50:"t_true",51:"t_false"};
    productions_: ProductionsType = [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,2],[11,3],[11,2],[7,4],[7,2],[7,7],[20,3],[20,1],[9,3],[10,4],[23,3],[14,1],[14,1],[14,1],[14,1],[14,1],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,2],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,5],[17,2],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1]];
    table: Array<StateType> = [{3:1,4:2,6:3,7:4,9:5,10:6,14:7,15:$V0,22:$V1,24:$V2,25:$V3,26:$V4,27:$V5,28:$V6},{1:[3]},{5:[1,15],6:16,7:4,9:5,10:6,14:7,15:$V0,22:$V1,24:$V2,25:$V3,26:$V4,27:$V5,28:$V6},o($V7,[2,3]),{8:[1,17]},{8:[1,18]},{8:[1,19]},{15:[1,20]},{16:[1,21]},{18:[1,22]},o($V8,[2,17]),o($V8,[2,18]),o($V8,[2,19]),o($V8,[2,20]),o($V8,[2,21]),{1:[2,1]},o($V7,[2,2]),o($V7,[2,4]),o($V7,[2,5]),o($V7,[2,6]),{8:[2,10],16:[1,23]},{15:$V9,17:24,18:$Va,23:28,30:$Vb,45:$Vc,46:$Vd,47:$Ve,48:$Vf,49:$Vg,50:$Vh,51:$Vi},{15:$V9,17:36,18:$Va,23:28,30:$Vb,45:$Vc,46:$Vd,47:$Ve,48:$Vf,49:$Vg,50:$Vh,51:$Vi},{15:$V9,17:37,18:[1,38],23:28,30:$Vb,45:$Vc,46:$Vd,47:$Ve,48:$Vf,49:$Vg,50:$Vh,51:$Vi},{8:[2,14],29:$Vj,30:$Vk,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp,36:$Vq,37:$Vr,38:$Vs,39:$Vt,40:$Vu,41:$Vv,42:$Vw,43:$Vx},{15:$V9,17:54,18:$Va,23:28,30:$Vb,45:$Vc,46:$Vd,47:$Ve,48:$Vf,49:$Vg,50:$Vh,51:$Vi},{15:$V9,17:55,18:$Va,23:28,30:$Vb,45:$Vc,46:$Vd,47:$Ve,48:$Vf,49:$Vg,50:$Vh,51:$Vi},{15:$V9,17:56,18:$Va,23:28,30:$Vb,45:$Vc,46:$Vd,47:$Ve,48:$Vf,49:$Vg,50:$Vh,51:$Vi},o($Vy,[2,40]),o($Vy,[2,41],{18:[1,57]}),o($Vy,[2,42]),o($Vy,[2,43]),o($Vy,[2,44]),o($Vy,[2,45]),o($Vy,[2,46]),o($Vy,[2,47]),{19:[1,58],29:$Vj,30:$Vk,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp,36:$Vq,37:$Vr,38:$Vs,39:$Vt,40:$Vu,41:$Vv,42:$Vw,43:$Vx},{8:[2,9],29:$Vj,30:$Vk,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp,36:$Vq,37:$Vr,38:$Vs,39:$Vt,40:$Vu,41:$Vv,42:$Vw,43:$Vx},{14:59,15:$V9,17:55,18:$Va,23:28,24:$V2,25:$V3,26:$V4,27:$V5,28:$V6,30:$Vb,45:$Vc,46:$Vd,47:$Ve,48:$Vf,49:$Vg,50:$Vh,51:$Vi},{15:$V9,17:60,18:$Va,23:28,30:$Vb,45:$Vc,46:$Vd,47:$Ve,48:$Vf,49:$Vg,50:$Vh,51:$Vi},{15:$V9,17:61,18:$Va,23:28,30:$Vb,45:$Vc,46:$Vd,47:$Ve,48:$Vf,49:$Vg,50:$Vh,51:$Vi},{15:$V9,17:62,18:$Va,23:28,30:$Vb,45:$Vc,46:$Vd,47:$Ve,48:$Vf,49:$Vg,50:$Vh,51:$Vi},{15:$V9,17:63,18:$Va,23:28,30:$Vb,45:$Vc,46:$Vd,47:$Ve,48:$Vf,49:$Vg,50:$Vh,51:$Vi},{15:$V9,17:64,18:$Va,23:28,30:$Vb,45:$Vc,46:$Vd,47:$Ve,48:$Vf,49:$Vg,50:$Vh,51:$Vi},{15:$V9,17:65,18:$Va,23:28,30:$Vb,45:$Vc,46:$Vd,47:$Ve,48:$Vf,49:$Vg,50:$Vh,51:$Vi},{15:$V9,17:66,18:$Va,23:28,30:$Vb,45:$Vc,46:$Vd,47:$Ve,48:$Vf,49:$Vg,50:$Vh,51:$Vi},{15:$V9,17:67,18:$Va,23:28,30:$Vb,45:$Vc,46:$Vd,47:$Ve,48:$Vf,49:$Vg,50:$Vh,51:$Vi},{15:$V9,17:68,18:$Va,23:28,30:$Vb,45:$Vc,46:$Vd,47:$Ve,48:$Vf,49:$Vg,50:$Vh,51:$Vi},{15:$V9,17:69,18:$Va,23:28,30:$Vb,45:$Vc,46:$Vd,47:$Ve,48:$Vf,49:$Vg,50:$Vh,51:$Vi},{15:$V9,17:70,18:$Va,23:28,30:$Vb,45:$Vc,46:$Vd,47:$Ve,48:$Vf,49:$Vg,50:$Vh,51:$Vi},{15:$V9,17:71,18:$Va,23:28,30:$Vb,45:$Vc,46:$Vd,47:$Ve,48:$Vf,49:$Vg,50:$Vh,51:$Vi},{15:$V9,17:72,18:$Va,23:28,30:$Vb,45:$Vc,46:$Vd,47:$Ve,48:$Vf,49:$Vg,50:$Vh,51:$Vi},{15:$V9,17:73,18:$Va,23:28,30:$Vb,45:$Vc,46:$Vd,47:$Ve,48:$Vf,49:$Vg,50:$Vh,51:$Vi},{15:$V9,17:74,18:$Va,23:28,30:$Vb,45:$Vc,46:$Vd,47:$Ve,48:$Vf,49:$Vg,50:$Vh,51:$Vi},o($Vz,[2,28],{29:$Vj,30:$Vk,31:$Vl,32:$Vm,33:$Vn,34:$Vo,43:$Vx}),{19:[1,75],29:$Vj,30:$Vk,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp,36:$Vq,37:$Vr,38:$Vs,39:$Vt,40:$Vu,41:$Vv,42:$Vw,43:$Vx},o($Vz,[2,39],{29:$Vj,30:$Vk,31:$Vl,32:$Vm,33:$Vn,34:$Vo,43:$Vx}),{19:[1,76]},{8:[2,15]},{19:[1,77]},o($VA,[2,22],{43:$Vx}),o($VA,[2,23],{43:$Vx}),o($VB,[2,24],{29:$Vj,30:$Vk,43:$Vx}),o($VB,[2,25],{29:$Vj,30:$Vk,43:$Vx}),o($Vz,[2,26],{29:$Vj,30:$Vk,31:$Vl,32:$Vm,34:$Vo,43:$Vx}),o($VB,[2,27],{29:$Vj,30:$Vk,43:$Vx}),o($VC,[2,30],{29:$Vj,30:$Vk,31:$Vl,32:$Vm,33:$Vn,34:$Vo,37:$Vr,38:$Vs,39:$Vt,40:$Vu,43:$Vx}),o($VC,[2,31],{29:$Vj,30:$Vk,31:$Vl,32:$Vm,33:$Vn,34:$Vo,37:$Vr,38:$Vs,39:$Vt,40:$Vu,43:$Vx}),o($Vz,[2,32],{29:$Vj,30:$Vk,31:$Vl,32:$Vm,33:$Vn,34:$Vo,43:$Vx}),o($Vz,[2,33],{29:$Vj,30:$Vk,31:$Vl,32:$Vm,33:$Vn,34:$Vo,43:$Vx}),o($Vz,[2,34],{29:$Vj,30:$Vk,31:$Vl,32:$Vm,33:$Vn,34:$Vo,43:$Vx}),o($Vz,[2,35],{29:$Vj,30:$Vk,31:$Vl,32:$Vm,33:$Vn,34:$Vo,43:$Vx}),o([8,19,41,44],[2,36],{29:$Vj,30:$Vk,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp,36:$Vq,37:$Vr,38:$Vs,39:$Vt,40:$Vu,42:$Vw,43:$Vx}),o([8,19,41,42,44],[2,37],{29:$Vj,30:$Vk,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp,36:$Vq,37:$Vr,38:$Vs,39:$Vt,40:$Vu,43:$Vx}),{29:$Vj,30:$Vk,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp,36:$Vq,37:$Vr,38:$Vs,39:$Vt,40:$Vu,41:$Vv,42:$Vw,43:$Vx,44:[1,78]},o($Vy,[2,29]),o($Vy,[2,16]),{15:$V9,17:79,18:$Va,23:28,30:$Vb,45:$Vc,46:$Vd,47:$Ve,48:$Vf,49:$Vg,50:$Vh,51:$Vi},{15:$V9,17:80,18:$Va,23:28,30:$Vb,45:$Vc,46:$Vd,47:$Ve,48:$Vf,49:$Vg,50:$Vh,51:$Vi},{8:[2,11],29:$Vj,30:$Vk,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp,36:$Vq,37:$Vr,38:$Vs,39:$Vt,40:$Vu,41:$Vv,42:$Vw,43:$Vx},o($Vy,[2,38])];
    defaultActions: {[key:number]: any} = {15:[2,1],58:[2,15]};

    performAction (yytext:string, yyleng:number, yylineno:number, yy:any, yystate:number /* action[1] */, $$:any /* vstack */, _$:any /* lstack */): any {
/* this == yyval */
          var $0 = $$.length - 1;
        switch (yystate) {
case 1:

      let root = new AST($$[$0-1]);
      this.$ = root;
      return this.$;
    
break;
case 2:

            $$[$0-1].push($$[$0]);
            this.$ = $$[$0-1];
          
break;
case 3:

            let arr = [];
            arr.push($$[$0]);
            this.$ = arr;
          
break;
case 4: case 5: case 6: case 29:
 this.$ = $$[$0-1]; 
break;
case 7:

                  this.$ = $$[$0-1];
                
break;
case 8:

                  this.$ = [];
                
break;
case 9:

              this.$ = new VariableDeclaration($$[$0-3], $$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
            
break;
case 10:

              this.$ = new VariableDeclaration($$[$0-1], $$[$0], null, _$[$0-1].first_line, _$[$0-1].first_column);
            
break;
case 11:

              this.$ = {
                type: 'declaration with cast',
                type_: $$[$0-6],
                id: $$[$0-5],
                type_cast: $$[$0-2],
                exp: $$[$0]
              }
            
break;
case 12:

            $$[$0-2].push($$[$0]);
            this.$ = $$[$0-2];
           
break;
case 13:

            let arrlistEXP = [];
            arrlistEXP.push($$[$0]);
            this.$ = arrlistEXP;
           
break;
case 14:

              this.$ = new Assigment($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
            
break;
case 15:
 this.$ = new Print($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 16:

            this.$ = {
              type: 'callback void',
              id: $$[$0-2],
              exp: $$[$0]
            }
          
break;
case 17:
 this.$ = new Type("INTEGER");
break;
case 18:
 this.$ = new Type("DOUBLE");
break;
case 19:
 this.$ = new Type("BOOLEAN");
break;
case 20:
 this.$ = new Type("CHAR");
break;
case 21:
 this.$ = new Type("STRING");
break;
case 22:
 this.$ = new Arithmetic($$[$0-2],$$[$0],false,_$[$0-2].first_line, _$[$0-2].first_column,"+"); 
break;
case 23:
 this.$ = new Arithmetic($$[$0-2],$$[$0],false,_$[$0-2].first_line, _$[$0-2].first_column,"-"); 
break;
case 24:
 this.$ = new Arithmetic($$[$0-2],$$[$0],false,_$[$0-2].first_line, _$[$0-2].first_column,"*"); 
break;
case 25:
 this.$ = new Arithmetic($$[$0-2],$$[$0],false,_$[$0-2].first_line, _$[$0-2].first_column,"/");
break;
case 26:
 this.$ = new Arithmetic($$[$0-2],$$[$0],false,_$[$0-2].first_line, _$[$0-2].first_column,"^"); 
break;
case 27:
 this.$ = new Arithmetic($$[$0-2],$$[$0],false,_$[$0-2].first_line, _$[$0-2].first_column,"%"); 
break;
case 28:
 this.$ = new Arithmetic($$[$0],null,true,_$[$0-1].first_line, _$[$0-1].first_column,"UNARY"); 
break;
case 30:
 this.$ = {type: 'eq', left: $$[$0-2], right: $$[$0]}; 
break;
case 31:
 this.$ = {type: 'neq', left: $$[$0-2], right: $$[$0]}; 
break;
case 32:
 this.$ = {type: 'lte', left: $$[$0-2], right: $$[$0]}; 
break;
case 33:
 this.$ = {type: 'gte', left: $$[$0-2], right: $$[$0]}; 
break;
case 34:
 this.$ = {type: 'lt', left: $$[$0-2], right: $$[$0]}; 
break;
case 35:
 this.$ = {type: 'gt', left: $$[$0-2], right: $$[$0]}; 
break;
case 36:
 this.$ = {type: 'and', left: $$[$0-2], right: $$[$0]}; 
break;
case 37:
 this.$ = {type: 'or', left: $$[$0-2], right: $$[$0]}; 
break;
case 38:
 this.$ = new TernaryOperator($$[$0-4],$$[$0-2],$$[$0],_$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 39:
 this.$ = {type: 'not', exp: $$[$0]}; 
break;
case 40:
 this.$ = $$[$0]; 
break;
case 41:
 this.$ = new Identifier($$[$0],_$[$0].first_line, _$[$0].first_column);
break;
case 42:
 this.$ = new Primitive($$[$0], "INTEGER", _$[$0].first_line, _$[$0].first_column);
break;
case 43:
 this.$ = new Primitive($$[$0], "DOUBLE", _$[$0].first_line, _$[$0].first_column);
break;
case 44:
 this.$ = new Primitive($$[$0], "STRING", _$[$0].first_line, _$[$0].first_column);
break;
case 45:
 this.$ = new Primitive($$[$0], "CHAR", _$[$0].first_line, _$[$0].first_column);
break;
case 46:
 this.$ = new Primitive(true, "BOOLEAN", _$[$0].first_line, _$[$0].first_column);
break;
case 47:
 this.$ = new Primitive(false, "BOOLEAN", _$[$0].first_line, _$[$0].first_column);
break;
        }
    }
}


/* generated by ts-jison-lex 0.3.0 */
import { JisonLexer, JisonLexerApi } from '@ts-jison/lexer';
export class AnalyzerLexer extends JisonLexer implements JisonLexerApi {
    options: any = {"case-insensitive":true,"moduleName":"Analyzer"};
    constructor (yy = {}) {
        super(yy);
    }

    rules: RegExp[] = [/^(?:\s+)/i,/^(?:(\/\/).*)/i,/^(?:[ \r\t])/i,/^(?:\n)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:new\b)/i,/^(?:list\b)/i,/^(?:add\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:print\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:length\b)/i,/^(?:truncate\b)/i,/^(?:round\b)/i,/^(?:typeOf\b)/i,/^(?:toString\b)/i,/^(?:toCharArray\b)/i,/^(?:main\b)/i,/^(?:void\b)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:\?)/i,/^(?::)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:=)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\$)/i,/^(?:;)/i,/^(?:,)/i,/^(?:\.)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:([a-zA-ZÑñ]|(_[a-zA-ZÑñ]))([a-zA-ZÑñ]|[0-9]|_)*)/i,/^(?:'(?:(\\)["bfnrt/(\\)]|(\\)u[a-fA-F0-9]{4}|[^"(\\)])')/i,/^(?:((?:[0-9]|[1-9][0-9]+))((?:\.[0-9]+))\b)/i,/^(?:((?:[0-9]|[1-9][0-9]+))\b)/i,/^(?:"(?:[{cor1}|{cor2}]|["\\"]["bnrt/["\\"]|[^"["\\"])*")/i,/^(?:$)/i,/^(?:.)/i];
    conditions: any = {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73],"inclusive":true}}
    performAction (yy:any,yy_:any,$avoiding_name_collisions:any,YY_START:any): any {
          var YYSTATE=YY_START;
        switch($avoiding_name_collisions) {
    case 0:/* skip whitespace */
      break;
    case 1:/* line comment */
      break;
    case 2:/* white space */
      break;
    case 3:/* white space */
      break;
    case 4:/* multi comment */
      break;
    case 5: return 24; 
      break;
    case 6: return 25; 
      break;
    case 7: return 26; 
      break;
    case 8: return 27; 
      break;
    case 9: return 28; 
      break;
    case 10: return 50; 
      break;
    case 11: return 51; 
      break;
    case 12: return 't_new'; 
      break;
    case 13: return 't_list'; 
      break;
    case 14: return 't_add'; 
      break;
    case 15: return 't_if'; 
      break;
    case 16: return 't_else'; 
      break;
    case 17: return 't_switch'; 
      break;
    case 18: return 't_case'; 
      break;
    case 19: return 't_default'; 
      break;
    case 20: return 't_while'; 
      break;
    case 21: return 't_for'; 
      break;
    case 22: return 't_do'; 
      break;
    case 23: return 't_break'; 
      break;
    case 24: return 't_continue'; 
      break;
    case 25: return 't_return'; 
      break;
    case 26: return 22; 
      break;
    case 27: return 't_toLower'; 
      break;
    case 28: return 't_toUpper'; 
      break;
    case 29: return 't_length'; 
      break;
    case 30: return 't_truncate'; 
      break;
    case 31: return 't_round'; 
      break;
    case 32: return 't_typeOf'; 
      break;
    case 33: return 't_toString'; 
      break;
    case 34: return 't_toCharArray'; 
      break;
    case 35: return 't_main'; 
      break;
    case 36: return 't_void'; 
      break;
    case 37:return 29;
      break;
    case 38:return 30;
      break;
    case 39:return 31;
      break;
    case 40:return 32;
      break;
    case 41:return 33;
      break;
    case 42:return 34;
      break;
    case 43:return 37;
      break;
    case 44:return 38;
      break;
    case 45:return 35;
      break;
    case 46:return 36;
      break;
    case 47:return 39;
      break;
    case 48:return 40;
      break;
    case 49:return 43;
      break;
    case 50:return 44;
      break;
    case 51:return 42;
      break;
    case 52:return 41;
      break;
    case 53:return 45;
      break;
    case 54:return 18;
      break;
    case 55:return 19;
      break;
    case 56:return 16;
      break;
    case 57:return '++';
      break;
    case 58:return '--';
      break;
    case 59:return '$';
      break;
    case 60:return 8;
      break;
    case 61:return 21;
      break;
    case 62:return '.';
      break;
    case 63:return 12;
      break;
    case 64:return 13;
      break;
    case 65:return '[';
      break;
    case 66:return ']';
      break;
    case 67:yy_.yytext = yy_.yytext.toLowerCase();          return 15;
      break;
    case 68:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);     return 49// substr to remove the quotes
      break;
    case 69:return 47
      break;
    case 70:return 46
      break;
    case 71:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);     return 48;
      break;
    case 72: return 5; 
      break;
    case 73:console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
      break;
        }
    }
}

