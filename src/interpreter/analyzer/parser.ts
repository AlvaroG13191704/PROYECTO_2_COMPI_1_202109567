/* parser generated by jison 0.3.0 */
/**
 * Returns a Parser implementing JisonParserApi and a Lexer implementing JisonLexerApi.
 */
import { JisonParser, JisonParserApi, StateType, SymbolsType, TerminalsType, ProductionsType, o } from '@ts-jison/parser';const noCommonCode=true;

export class ParserParser extends JisonParser implements JisonParserApi {
    $?: any;

    constructor (yy = {}, lexer = new ParserLexer(yy)) {
      super(yy, lexer);
    }

    symbols_: SymbolsType = {"error":2,"INIT":3,"t_add":4,"EOF":5,"$accept":0,"$end":1};
    terminals_: TerminalsType = {2:"error",4:"t_add",5:"EOF"};
    productions_: ProductionsType = [0,[3,2]];
    table: Array<StateType> = [{3:1,4:[1,2]},{1:[3]},{5:[1,3]},{1:[2,1]}];
    defaultActions: {[key:number]: any} = {3:[2,1]};

    performAction (yytext:string, yyleng:number, yylineno:number, yy:any, yystate:number /* action[1] */, $$:any /* vstack */, _$:any /* lstack */): any {
/* this == yyval */
          var $0 = $$.length - 1;
        switch (yystate) {
case 1:

        console.log("Parse de Jison entrada: OK ");
    
break;
        }
    }
}


/* generated by ts-jison-lex 0.3.0 */
import { JisonLexer, JisonLexerApi } from '@ts-jison/lexer';
export class ParserLexer extends JisonLexer implements JisonLexerApi {
    options: any = {"case-insensitive":true,"moduleName":"Parser"};
    constructor (yy = {}) {
        super(yy);
    }

    rules: RegExp[] = [/^(?:\s+)/i,/^(?:$)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:([a-zA-ZÑñ]|(_[a-zA-ZÑñ]))([a-zA-ZÑñ]|[0-9]|_)*)/i,/^(?:"(?:[(\[)|(\])]|["\\"]["bnrt/["\\"]|[^"["\\"])*")/i,/^(?:'(?:(\\)["bfnrt/(\\)]|(\\)u[a-fA-F0-9]{4}|[^"(\\)])')/i,/^(?:((?:[0-9]|[1-9][0-9]+))((?:\.[0-9]+))\b)/i,/^(?:((?:[0-9]|[1-9][0-9]+))\b)/i,/^(?:"([^\"\\]|\\.)*")/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:\\n)/i,/^(?:\\\\)/i,/^(?:\\")/i,/^(?:\\t)/i,/^(?:\\')/i,/^(?:new\b)/i,/^(?:list\b)/i,/^(?:add\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:print\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:length\b)/i,/^(?:truncate\b)/i,/^(?:round\b)/i,/^(?:typeOf\b)/i,/^(?:toString\b)/i,/^(?:toCharArray\b)/i,/^(?:main\b)/i,/^(?:void\b)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:<=)/i,/^(?:>)/i,/^(?:>=)/i,/^(?:\?)/i,/^(?::)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:=)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\$)/i,/^(?:;)/i,/^(?:,)/i,/^(?:\.)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:.)/i];
    conditions: any = {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75],"inclusive":true}}
    performAction (yy:any,yy_:any,$avoiding_name_collisions:any,YY_START:any): any {
          var YYSTATE=YY_START;
        switch($avoiding_name_collisions) {
    case 0:/* skip whitespace */
      break;
    case 1: return 5; 
      break;
    case 2:/* skip comments */
      break;
    case 3:/* IGNORE */
      break;
    case 4:yy_.yytext = yy_.yytext.toLowerCase();          return 't_id';
      break;
    case 5:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);    return 't_stringWord'; // substr to remove the quotes
      break;
    case 6:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);     return 't_character'// substr to remove the quotes
      break;
    case 7:return 't_float'
      break;
    case 8:return 't_integer'
      break;
    case 9:return 't_scapeSecuence'
      break;
    case 10: return 't_int'; 
      break;
    case 11: return 't_double'; 
      break;
    case 12: return 't_boolean'; 
      break;
    case 13: return 't_char'; 
      break;
    case 14: return 't_string'; 
      break;
    case 15: return 't_newline'; 
      break;
    case 16: return 't_backslash'; 
      break;
    case 17: return 't_double_quote'; 
      break;
    case 18: return 't_tab'; 
      break;
    case 19: return 't_single_quote'; 
      break;
    case 20: return 't_new'; 
      break;
    case 21: return 't_list'; 
      break;
    case 22: return 4; 
      break;
    case 23: return 't_if'; 
      break;
    case 24: return 't_else'; 
      break;
    case 25: return 't_switch'; 
      break;
    case 26: return 't_case'; 
      break;
    case 27: return 't_default'; 
      break;
    case 28: return 't_while'; 
      break;
    case 29: return 't_for'; 
      break;
    case 30: return 't_do'; 
      break;
    case 31: return 't_break'; 
      break;
    case 32: return 't_continue'; 
      break;
    case 33: return 't_return'; 
      break;
    case 34: return 't_print'; 
      break;
    case 35: return 't_toLower'; 
      break;
    case 36: return 't_toUpper'; 
      break;
    case 37: return 't_length'; 
      break;
    case 38: return 't_truncate'; 
      break;
    case 39: return 't_round'; 
      break;
    case 40: return 't_typeOf'; 
      break;
    case 41: return 't_toString'; 
      break;
    case 42: return 't_toCharArray'; 
      break;
    case 43: return 't_main'; 
      break;
    case 44: return 't_void'; 
      break;
    case 45:return '+';
      break;
    case 46:return '-';
      break;
    case 47:return '*';
      break;
    case 48:return '/';
      break;
    case 49:return '^';
      break;
    case 50:return '%';
      break;
    case 51:return '==';
      break;
    case 52:return '!=';
      break;
    case 53:return '<';
      break;
    case 54:return '<=';
      break;
    case 55:return '>';
      break;
    case 56:return '>=';
      break;
    case 57:return '?';
      break;
    case 58:return ':';
      break;
    case 59:return '||';
      break;
    case 60:return '&&';
      break;
    case 61:return '!';
      break;
    case 62:return '(';
      break;
    case 63:return ')';
      break;
    case 64:return '=';
      break;
    case 65:return '++';
      break;
    case 66:return '--';
      break;
    case 67:return '$';
      break;
    case 68:return ';';
      break;
    case 69:return ',';
      break;
    case 70:return '.';
      break;
    case 71:return '{';
      break;
    case 72:return '}';
      break;
    case 73:return '[';
      break;
    case 74:return ']';
      break;
    case 75:console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
      break;
        }
    }
}

