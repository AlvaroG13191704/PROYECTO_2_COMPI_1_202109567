/* parser generated by jison 0.3.0 */
/**
 * Returns a Parser implementing JisonParserApi and a Lexer implementing JisonLexerApi.
 */

  import { AST } from '../AST/AST';
  // errors
  import { Errors } from '../AST/Errors';
  // table
  import { Type } from '../TableSymbols/Type';
  // main
  import { Main } from '../Instructions/Main';
  // INSTRUCTIONS
  import { VariableDeclaration } from '../Instructions/Declaration';
  import { Assigment } from '../Instructions/Assigment';
  import { Print } from '../Instructions/Print';
  import { Cast } from '../Instructions/Cast';
  import { IF } from '../Instructions/ControlSentences/IF';
  import { For } from '../Instructions/LoopSentences/For';
  import { While } from '../Instructions/LoopSentences/While';
  import { DoWhile } from '../Instructions/LoopSentences/DoWhile';
  import { Switch } from '../Instructions/ControlSentences/Switch';
  import { Case } from '../Instructions/ControlSentences/Case';
  import { Break } from '../Instructions/TransferSentences/Break';
  import { Continue } from '../Instructions/TransferSentences/Continue';
  import { Return } from '../Instructions/TransferSentences/Return';
  import { Function } from '../Instructions/Function';
  import { Callback } from '../Instructions/Callback';
  // DATA STRUCTURES
  import { Vector } from '../Instructions/Vector';
  import { List } from '../Instructions/List';
  import { ModifyVector } from '../Instructions/DataStructure/ModifyVector';
  import { ModifyList } from '../Instructions/DataStructure/ModifyList';
  import { AddList } from '../Instructions/DataStructure/AddList';
  // EXPRESSIONS
  import { Identifier } from '../Expressions/Identifier';
  import { Primitive } from '../Expressions/Primitive';
  import { TernaryOperator } from '../Expressions/TernaryOperator';
  import { Arithmetic } from '../Expressions/Operations/Arithmetic';
  import { Logic } from '../Expressions/Operations/Logic';
  import { Relational } from '../Expressions/Operations/Relational';
  // data structures
  import { AccessVector } from '../Expressions/DataStructures/Vector/AccessVector';
  import { AccessList } from '../Expressions/DataStructures/List/AccessList';
  // natives
  import { ToLower } from '../Expressions/Natives/ToLower';
  import { ToUpper } from '../Expressions/Natives/ToUpper';
  import { ToString } from '../Expressions/Natives/ToString';
  import { Truncate } from '../Expressions/Natives/Truncate';
  import { Round } from '../Expressions/Natives/Round';
  import { Typeof } from '../Expressions/Natives/Typeof';
  import { Length } from '../Expressions/Natives/Length';
  // SYmbol
  import { Symbol } from '../TableSymbols/Symbol';



import { JisonParser, JisonParserApi, StateType, SymbolsType, TerminalsType, ProductionsType, o } from '@ts-jison/parser';const $V0=[1,19],$V1=[1,16],$V2=[1,17],$V3=[1,18],$V4=[1,23],$V5=[1,22],$V6=[1,24],$V7=[1,25],$V8=[1,26],$V9=[1,27],$Va=[1,28],$Vb=[1,29],$Vc=[1,30],$Vd=[1,31],$Ve=[1,32],$Vf=[1,33],$Vg=[1,34],$Vh=[1,35],$Vi=[1,36],$Vj=[1,37],$Vk=[1,38],$Vl=[1,39],$Vm=[1,40],$Vn=[1,41],$Vo=[1,42],$Vp=[1,20],$Vq=[2,5,20,21,22,25,34,35,41,42,44,48,50,51,54,55,57,61,62,63,64,65,66,67,68,69,70,71,72,73],$Vr=[1,60],$Vs=[1,57],$Vt=[1,55],$Vu=[1,58],$Vv=[1,61],$Vw=[1,62],$Vx=[1,63],$Vy=[1,64],$Vz=[1,65],$VA=[1,66],$VB=[1,76],$VC=[1,74],$VD=[1,75],$VE=[1,77],$VF=[25,28,29,37],$VG=[1,103],$VH=[1,104],$VI=[1,93],$VJ=[1,94],$VK=[1,95],$VL=[1,96],$VM=[1,97],$VN=[1,98],$VO=[1,99],$VP=[1,100],$VQ=[1,101],$VR=[1,102],$VS=[1,105],$VT=[1,106],$VU=[1,107],$VV=[8,28,30,34,36,37,49,58,74,75,76,77,78,79,80,81,82,83,84,85,87],$VW=[1,111],$VX=[8,28,30,34,49,58,84,85,87],$VY=[1,167],$VZ=[28,34,58],$V_=[8,28,30,34,36,37,49,58,74,75,80,81,82,83,84,85,87],$V$=[8,28,30,34,36,37,49,58,74,75,76,77,79,80,81,82,83,84,85,87],$V01=[8,28,30,34,36,37,49,58,80,81,82,83,84,85,87],$V11=[1,191],$V21=[2,61],$V31=[28,58],$V41=[1,226],$V51=[1,225],$V61=[2,62],$V71=[34,48,50];

export class AnalyzerParser extends JisonParser implements JisonParserApi {
    $?: any;

    constructor (yy = {}, lexer = new AnalyzerLexer(yy)) {
      super(yy, lexer);
    }

    symbols_: SymbolsType = {"error":2,"INIT":3,"SENTENCES":4,"EOF":5,"SENTENCE":6,"MAIN":7,";":8,"DECLARATION":9,"ASSIGNMENT":10,"PRINT":11,"INCDEC":12,"IF":13,"SWITCH":14,"FOR":15,"WHILE":16,"DO_WHILE":17,"FUNCTION":18,"CALLBACK":19,"t_break":20,"t_continue":21,"t_return":22,"EXP":23,"TYPE":24,"id":25,"=":26,"(":27,")":28,"[":29,"]":30,"t_new":31,"{":32,"LISTEXP":33,"}":34,"t_list":35,"<":36,">":37,"t_toCharArray":38,"++":39,"--":40,"t_print":41,"t_if":42,"t_else":43,"t_switch":44,"CASE_LIST":45,"DEFAULT":46,"CASE":47,"t_case":48,":":49,"t_default":50,"t_for":51,"DEC_ASSING_FOR":52,"UPDATE_FOR":53,"t_while":54,"t_do":55,"LIST_PARAM":56,"t_void":57,",":58,".":59,"t_add":60,"t_toLower":61,"t_toUpper":62,"t_toString":63,"t_truncate":64,"t_round":65,"t_typeof":66,"t_length":67,"tint":68,"tdouble":69,"tboolean":70,"tchar":71,"tstring":72,"t_main":73,"+":74,"-":75,"*":76,"/":77,"^":78,"%":79,"==":80,"!=":81,"<=":82,">=":83,"&&":84,"||":85,"!":86,"?":87,"integer":88,"float":89,"words":90,"character":91,"t_true":92,"t_false":93,"$accept":0,"$end":1};
    terminals_: TerminalsType = {2:"error",5:"EOF",8:";",20:"t_break",21:"t_continue",22:"t_return",25:"id",26:"=",27:"(",28:")",29:"[",30:"]",31:"t_new",32:"{",34:"}",35:"t_list",36:"<",37:">",38:"t_toCharArray",39:"++",40:"--",41:"t_print",42:"t_if",43:"t_else",44:"t_switch",48:"t_case",49:":",50:"t_default",51:"t_for",54:"t_while",55:"t_do",57:"t_void",58:",",59:".",60:"t_add",61:"t_toLower",62:"t_toUpper",63:"t_toString",64:"t_truncate",65:"t_round",66:"t_typeof",67:"t_length",68:"tint",69:"tdouble",70:"tboolean",71:"tchar",72:"tstring",73:"t_main",74:"+",75:"-",76:"*",77:"/",78:"^",79:"%",80:"==",81:"!=",82:"<=",83:">=",84:"&&",85:"||",86:"!",87:"?",88:"integer",89:"float",90:"words",91:"character",92:"t_true",93:"t_false"};
    productions_: ProductionsType = [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,2],[6,3],[6,1],[9,4],[9,2],[9,7],[9,10],[9,8],[9,11],[9,10],[10,3],[10,6],[10,8],[12,2],[12,2],[11,4],[13,7],[13,11],[13,9],[14,7],[14,8],[14,7],[45,2],[45,1],[47,4],[46,3],[15,11],[52,4],[52,3],[52,0],[53,2],[53,2],[53,3],[16,7],[17,9],[18,8],[18,7],[18,8],[18,7],[56,4],[56,2],[19,4],[19,3],[19,4],[19,6],[19,6],[19,4],[19,4],[19,4],[19,4],[19,4],[19,4],[19,4],[33,3],[33,1],[24,1],[24,1],[24,1],[24,1],[24,1],[7,2],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,2],[23,1],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,2],[23,5],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1]];
    table: Array<StateType> = [{2:$V0,3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V1,21:$V2,22:$V3,24:21,25:$V4,35:$V5,41:$V6,42:$V7,44:$V8,51:$V9,54:$Va,55:$Vb,57:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp},{1:[3]},{2:$V0,5:[1,43],6:44,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V1,21:$V2,22:$V3,24:21,25:$V4,35:$V5,41:$V6,42:$V7,44:$V8,51:$V9,54:$Va,55:$Vb,57:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp},o($Vq,[2,3]),{8:[1,45]},{8:[1,46]},{8:[1,47]},{8:[1,48]},{8:[1,49]},o($Vq,[2,9]),o($Vq,[2,10]),o($Vq,[2,11]),o($Vq,[2,12]),o($Vq,[2,13]),o($Vq,[2,14]),{8:[1,50]},{8:[1,51]},{8:[1,52]},{8:[1,53],12:56,19:59,23:54,25:$Vr,27:$Vs,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,75:$Vt,86:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},o($Vq,[2,20]),{19:67,25:[1,68],61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj},{25:[1,69],29:[1,70]},{36:[1,71]},{26:[1,72],27:$VB,29:[1,73],39:$VC,40:$VD,59:$VE},{27:[1,78]},{27:[1,79]},{27:[1,80]},{27:[1,81]},{27:[1,82]},{32:[1,83]},{25:[1,84]},{27:[1,85]},{27:[1,86]},{27:[1,87]},{27:[1,88]},{27:[1,89]},{27:[1,90]},{27:[1,91]},o($VF,[2,73]),o($VF,[2,74]),o($VF,[2,75]),o($VF,[2,76]),o($VF,[2,77]),{1:[2,1]},o($Vq,[2,2]),o($Vq,[2,4]),o($Vq,[2,5]),o($Vq,[2,6]),o($Vq,[2,7]),o($Vq,[2,8]),o($Vq,[2,15]),o($Vq,[2,16]),o($Vq,[2,17]),o($Vq,[2,18]),{8:[1,92],36:$VG,37:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,87:$VU},{12:56,19:59,23:108,25:$Vr,27:$Vs,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,75:$Vt,86:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},o($VV,[2,86]),{12:56,19:59,23:109,25:$Vr,27:$Vs,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,75:$Vt,86:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{12:56,19:59,23:110,25:$Vr,27:$Vs,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,75:$Vt,86:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},o($VV,[2,98]),o($VV,[2,99],{27:$VB,29:$VW,39:$VC,40:$VD,59:$VE}),o($VV,[2,100]),o($VV,[2,101]),o($VV,[2,102]),o($VV,[2,103]),o($VV,[2,104]),o($VV,[2,105]),{8:[2,78]},{27:$VB,29:$VW,59:$VE},{8:[2,22],26:[1,112],27:[1,113]},{30:[1,114]},{24:115,68:$Vk,69:$Vl,70:$Vm,71:$Vn,72:$Vo},{12:56,19:59,23:116,25:$Vr,27:$Vs,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,75:$Vt,86:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{12:56,19:59,23:117,25:$Vr,27:$Vs,29:[1,118],61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,75:$Vt,86:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},o($VV,[2,31]),o($VV,[2,32]),{12:56,19:59,23:121,25:$Vr,27:$Vs,28:[1,120],33:119,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,75:$Vt,86:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{60:[1,122]},{12:56,19:59,23:123,25:$Vr,27:$Vs,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,75:$Vt,86:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{12:56,19:59,23:124,25:$Vr,27:$Vs,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,75:$Vt,86:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{12:56,19:59,23:125,25:$Vr,27:$Vs,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,75:$Vt,86:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{8:[2,47],24:127,25:[1,128],52:126,68:$Vk,69:$Vl,70:$Vm,71:$Vn,72:$Vo},{12:56,19:59,23:129,25:$Vr,27:$Vs,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,75:$Vt,86:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{2:$V0,4:130,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V1,21:$V2,22:$V3,24:21,25:$V4,35:$V5,41:$V6,42:$V7,44:$V8,51:$V9,54:$Va,55:$Vb,57:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp},{27:[1,131]},{12:56,19:59,23:132,25:$Vr,27:$Vs,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,75:$Vt,86:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{12:56,19:59,23:133,25:$Vr,27:$Vs,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,75:$Vt,86:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{12:56,19:59,23:134,25:$Vr,27:$Vs,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,75:$Vt,86:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{12:56,19:59,23:135,25:$Vr,27:$Vs,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,75:$Vt,86:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{12:56,19:59,23:136,25:$Vr,27:$Vs,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,75:$Vt,86:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{12:56,19:59,23:137,25:$Vr,27:$Vs,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,75:$Vt,86:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{12:56,19:59,23:138,25:$Vr,27:$Vs,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,75:$Vt,86:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},o($Vq,[2,19]),{12:56,19:59,23:139,25:$Vr,27:$Vs,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,75:$Vt,86:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{12:56,19:59,23:140,25:$Vr,27:$Vs,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,75:$Vt,86:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{12:56,19:59,23:141,25:$Vr,27:$Vs,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,75:$Vt,86:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{12:56,19:59,23:142,25:$Vr,27:$Vs,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,75:$Vt,86:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{12:56,19:59,23:143,25:$Vr,27:$Vs,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,75:$Vt,86:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{12:56,19:59,23:144,25:$Vr,27:$Vs,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,75:$Vt,86:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{12:56,19:59,23:145,25:$Vr,27:$Vs,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,75:$Vt,86:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{12:56,19:59,23:146,25:$Vr,27:$Vs,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,75:$Vt,86:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{12:56,19:59,23:147,25:$Vr,27:$Vs,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,75:$Vt,86:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{12:56,19:59,23:148,25:$Vr,27:$Vs,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,75:$Vt,86:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{12:56,19:59,23:149,25:$Vr,27:$Vs,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,75:$Vt,86:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{12:56,19:59,23:150,25:$Vr,27:$Vs,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,75:$Vt,86:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{12:56,19:59,23:151,25:$Vr,27:$Vs,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,75:$Vt,86:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{12:56,19:59,23:152,25:$Vr,27:$Vs,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,75:$Vt,86:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{12:56,19:59,23:153,25:$Vr,27:$Vs,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,75:$Vt,86:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},o($VV,[2,85]),{28:[1,154],36:$VG,37:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,87:$VU},o($VX,[2,96],{36:$VG,37:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR}),{12:56,19:59,23:155,25:$Vr,27:$Vs,29:[1,156],61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,75:$Vt,86:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{12:56,19:59,23:157,25:$Vr,27:[1,158],61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,75:$Vt,86:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{24:161,28:[1,160],56:159,68:$Vk,69:$Vl,70:$Vm,71:$Vn,72:$Vo},{25:[1,162]},{37:[1,163]},{8:[2,28],36:$VG,37:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,87:$VU},{30:[1,164],36:$VG,37:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,87:$VU},{12:56,19:59,23:165,25:$Vr,27:$Vs,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,75:$Vt,86:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{28:[1,166],58:$VY},o($VV,[2,60]),o($VZ,[2,72],{36:$VG,37:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,87:$VU}),{27:[1,168]},{28:[1,169],36:$VG,37:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,87:$VU},{28:[1,170],36:$VG,37:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,87:$VU},{28:[1,171],36:$VG,37:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,87:$VU},{8:[1,172]},{25:[1,173]},{26:[1,174]},{28:[1,175],36:$VG,37:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,87:$VU},{2:$V0,6:44,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V1,21:$V2,22:$V3,24:21,25:$V4,34:[1,176],35:$V5,41:$V6,42:$V7,44:$V8,51:$V9,54:$Va,55:$Vb,57:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp},{24:161,28:[1,178],56:177,68:$Vk,69:$Vl,70:$Vm,71:$Vn,72:$Vo},{28:[1,179],36:$VG,37:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,87:$VU},{28:[1,180],36:$VG,37:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,87:$VU},{28:[1,181],36:$VG,37:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,87:$VU},{28:[1,182],36:$VG,37:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,87:$VU},{28:[1,183],36:$VG,37:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,87:$VU},{28:[1,184],36:$VG,37:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,87:$VU},{28:[1,185],36:$VG,37:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,87:$VU},o($V_,[2,79],{76:$VK,77:$VL,78:$VM,79:$VN}),o($V_,[2,80],{76:$VK,77:$VL,78:$VM,79:$VN}),o($V$,[2,81],{78:$VM}),o($V$,[2,82],{78:$VM}),o($V$,[2,83],{78:$VM}),o($V$,[2,84],{78:$VM}),o($V01,[2,88],{74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN}),o($V01,[2,89],{74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN}),o($V01,[2,90],{74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN}),o($V01,[2,91],{74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN}),o($V01,[2,92],{74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN}),o($V01,[2,93],{74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN}),o($VX,[2,94],{36:$VG,37:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR}),o([8,28,30,34,49,58,85,87],[2,95],{36:$VG,37:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS}),{36:$VG,37:$VH,49:[1,186],74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,87:$VU},o($VV,[2,87]),{30:[1,187],36:$VG,37:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,87:$VU},{12:56,19:59,23:188,25:$Vr,27:$Vs,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,75:$Vt,86:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{8:[2,21],36:$VG,37:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,87:$VU},{12:56,19:59,23:109,24:189,25:$Vr,27:$Vs,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm,71:$Vn,72:$Vo,75:$Vt,86:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{28:[1,190],58:$V11},{32:[1,192]},{25:[1,193]},{26:[1,194]},{25:[1,195]},{8:$V21,26:[1,196]},{30:[1,197],36:$VG,37:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,87:$VU},o($VV,[2,59]),{12:56,19:59,23:198,25:$Vr,27:$Vs,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,75:$Vt,86:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{12:56,19:59,23:199,25:$Vr,27:$Vs,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,75:$Vt,86:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{8:[2,33]},{32:[1,200]},{32:[1,201]},{12:56,19:59,23:202,25:$Vr,27:$Vs,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,75:$Vt,86:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{26:[1,203]},{12:56,19:59,23:204,25:$Vr,27:$Vs,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,75:$Vt,86:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{32:[1,205]},{54:[1,206]},{28:[1,207],58:$V11},{32:[1,208]},o($VV,[2,64]),o($VV,[2,65]),o($VV,[2,66]),o($VV,[2,67]),o($VV,[2,68]),o($VV,[2,69]),o($VV,[2,70]),{12:56,19:59,23:209,25:$Vr,27:$Vs,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,75:$Vt,86:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},o($VV,$V21),{30:[1,210],36:$VG,37:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,87:$VU},{28:[1,211]},{32:[1,212]},{24:213,68:$Vk,69:$Vl,70:$Vm,71:$Vn,72:$Vo},{2:$V0,4:214,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V1,21:$V2,22:$V3,24:21,25:$V4,35:$V5,41:$V6,42:$V7,44:$V8,51:$V9,54:$Va,55:$Vb,57:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp},o($V31,[2,58]),{31:[1,215],32:[1,216]},{26:[1,217]},{12:56,19:59,23:218,25:$Vr,27:$Vs,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,75:$Vt,86:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{30:[1,219]},o($VZ,[2,71],{36:$VG,37:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,87:$VU}),{28:[1,220],36:$VG,37:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,87:$VU},{2:$V0,4:221,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V1,21:$V2,22:$V3,24:21,25:$V4,35:$V5,41:$V6,42:$V7,44:$V8,51:$V9,54:$Va,55:$Vb,57:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp},{45:222,46:223,47:224,48:$V41,50:$V51},{8:[1,227],36:$VG,37:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,87:$VU},{12:56,19:59,23:228,25:$Vr,27:$Vs,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,75:$Vt,86:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{8:[2,46],36:$VG,37:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,87:$VU},{2:$V0,4:229,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V1,21:$V2,22:$V3,24:21,25:$V4,35:$V5,41:$V6,42:$V7,44:$V8,51:$V9,54:$Va,55:$Vb,57:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp},{27:[1,230]},{32:[1,231]},{2:$V0,4:232,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V1,21:$V2,22:$V3,24:21,25:$V4,35:$V5,41:$V6,42:$V7,44:$V8,51:$V9,54:$Va,55:$Vb,57:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp},o([8,28,30,34,49,58,87],[2,97],{36:$VG,37:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT}),{30:[1,233]},{12:56,19:59,23:234,25:$Vr,27:$Vs,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,75:$Vt,86:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{2:$V0,4:235,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V1,21:$V2,22:$V3,24:21,25:$V4,35:$V5,41:$V6,42:$V7,44:$V8,51:$V9,54:$Va,55:$Vb,57:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp},{25:[1,236]},{2:$V0,6:44,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V1,21:$V2,22:$V3,24:21,25:$V4,34:[1,237],35:$V5,41:$V6,42:$V7,44:$V8,51:$V9,54:$Va,55:$Vb,57:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp},{24:238,68:$Vk,69:$Vl,70:$Vm,71:$Vn,72:$Vo},{12:56,19:59,23:121,25:$Vr,27:$Vs,33:239,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,75:$Vt,86:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{31:[1,240],38:[1,241]},{8:[2,29],36:$VG,37:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,87:$VU},{8:$V61,26:[1,242]},o($VV,[2,63]),{2:$V0,6:44,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V1,21:$V2,22:$V3,24:21,25:$V4,34:[1,243],35:$V5,41:$V6,42:$V7,44:$V8,51:$V9,54:$Va,55:$Vb,57:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp},{34:[1,244],46:245,47:246,48:$V41,50:$V51},{34:[1,247]},o($V71,[2,41]),{49:[1,248]},{12:56,19:59,23:249,25:$Vr,27:$Vs,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,75:$Vt,86:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{25:[1,251],53:250},{8:[2,45],36:$VG,37:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,87:$VU},{2:$V0,6:44,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V1,21:$V2,22:$V3,24:21,25:$V4,34:[1,252],35:$V5,41:$V6,42:$V7,44:$V8,51:$V9,54:$Va,55:$Vb,57:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp},{12:56,19:59,23:253,25:$Vr,27:$Vs,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,75:$Vt,86:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{2:$V0,4:254,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V1,21:$V2,22:$V3,24:21,25:$V4,35:$V5,41:$V6,42:$V7,44:$V8,51:$V9,54:$Va,55:$Vb,57:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp},{2:$V0,6:44,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V1,21:$V2,22:$V3,24:21,25:$V4,34:[1,255],35:$V5,41:$V6,42:$V7,44:$V8,51:$V9,54:$Va,55:$Vb,57:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp},o($VV,$V61),{8:[2,23],36:$VG,37:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,87:$VU},{2:$V0,6:44,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V1,21:$V2,22:$V3,24:21,25:$V4,34:[1,256],35:$V5,41:$V6,42:$V7,44:$V8,51:$V9,54:$Va,55:$Vb,57:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp},o($V31,[2,57]),o($Vq,[2,54]),{29:[1,257]},{34:[1,258],58:$VY},{35:[1,259]},{27:[1,260]},{12:56,19:59,23:261,25:$Vr,27:$Vs,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,75:$Vt,86:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},o($Vq,[2,34],{43:[1,262]}),o($Vq,[2,37]),{34:[1,263]},o($V71,[2,40]),o($Vq,[2,39]),{2:$V0,4:264,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V1,21:$V2,22:$V3,24:21,25:$V4,35:$V5,41:$V6,42:$V7,44:$V8,51:$V9,54:$Va,55:$Vb,57:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp},{36:$VG,37:$VH,49:[1,265],74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,87:$VU},{28:[1,266]},{26:[1,269],39:[1,267],40:[1,268]},o($Vq,[2,51]),{28:[1,270],36:$VG,37:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,87:$VU},{2:$V0,6:44,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V1,21:$V2,22:$V3,24:21,25:$V4,34:[1,271],35:$V5,41:$V6,42:$V7,44:$V8,51:$V9,54:$Va,55:$Vb,57:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp},o($Vq,[2,56]),o($Vq,[2,53]),{12:56,19:59,23:272,25:$Vr,27:$Vs,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,75:$Vt,86:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{8:[2,25]},{36:[1,273]},{12:56,19:59,23:274,25:$Vr,27:$Vs,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,75:$Vt,86:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{8:[2,30],36:$VG,37:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,87:$VU},{13:276,32:[1,275],42:$V7},o($Vq,[2,38]),{2:$V0,6:44,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V1,21:$V2,22:$V3,24:21,25:$V4,34:[2,43],35:$V5,41:$V6,42:$V7,44:$V8,51:$V9,54:$Va,55:$Vb,57:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp},{2:$V0,4:277,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V1,21:$V2,22:$V3,24:21,25:$V4,35:$V5,41:$V6,42:$V7,44:$V8,51:$V9,54:$Va,55:$Vb,57:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp},{32:[1,278]},{28:[2,48]},{28:[2,49]},{12:56,19:59,23:279,25:$Vr,27:$Vs,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,75:$Vt,86:$Vu,88:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{8:[1,280]},o($Vq,[2,55]),{30:[1,281],36:$VG,37:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,87:$VU},{24:282,68:$Vk,69:$Vl,70:$Vm,71:$Vn,72:$Vo},{28:[1,283],36:$VG,37:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,87:$VU},{2:$V0,4:284,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V1,21:$V2,22:$V3,24:21,25:$V4,35:$V5,41:$V6,42:$V7,44:$V8,51:$V9,54:$Va,55:$Vb,57:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp},o($Vq,[2,36]),o($V71,[2,42],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,24:21,6:44,2:$V0,20:$V1,21:$V2,22:$V3,25:$V4,35:$V5,41:$V6,42:$V7,44:$V8,51:$V9,54:$Va,55:$Vb,57:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp}),{2:$V0,4:285,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V1,21:$V2,22:$V3,24:21,25:$V4,35:$V5,41:$V6,42:$V7,44:$V8,51:$V9,54:$Va,55:$Vb,57:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp},{28:[2,50],36:$VG,37:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,87:$VU},o($Vq,[2,52]),{8:[2,24]},{37:[1,286]},{8:[2,27]},{2:$V0,6:44,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V1,21:$V2,22:$V3,24:21,25:$V4,34:[1,287],35:$V5,41:$V6,42:$V7,44:$V8,51:$V9,54:$Va,55:$Vb,57:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp},{2:$V0,6:44,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V1,21:$V2,22:$V3,24:21,25:$V4,34:[1,288],35:$V5,41:$V6,42:$V7,44:$V8,51:$V9,54:$Va,55:$Vb,57:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp},{8:[2,26]},o($Vq,[2,35]),o($Vq,[2,44])];
    defaultActions: {[key:number]: any} = {43:[2,1],67:[2,78],169:[2,33],258:[2,25],267:[2,48],268:[2,49],281:[2,24],283:[2,27],286:[2,26]};

    performAction (yytext:string, yyleng:number, yylineno:number, yy:any, yystate:number /* action[1] */, $$:any /* vstack */, _$:any /* lstack */): any {
/* this == yyval */
          var $0 = $$.length - 1;
        switch (yystate) {
case 1:

      let root = new AST($$[$0-1]);
      this.$ = root;
      return this.$;
    
break;
case 2:

            $$[$0-1].push($$[$0]);
            this.$ = $$[$0-1];
          
break;
case 3:

            let arr = [];
            arr.push($$[$0]);
            this.$ = arr;
          
break;
case 4: case 5: case 6: case 7: case 8: case 15: case 87:
 this.$ = $$[$0-1]; 
break;
case 9: case 10: case 11: case 12: case 13: case 14: case 86: case 98:
 this.$ = $$[$0]; 
break;
case 16:
 this.$ = new Break(); 
break;
case 17:
 this.$ = new Continue(); 
break;
case 18:
 this.$ = new Return(null); 
break;
case 19:
 this.$ = new Return($$[$0-1]); 
break;
case 20:

                      console.error('Este es un error sintactico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' +this._$.first_column);
                      new Errors("Sintactico", `El caracter ${yytext} no pertenece al lenguaje`, this._$.first_line, this_$.first_column);
                    
break;
case 21:

              this.$ = new VariableDeclaration($$[$0-3], $$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
            
break;
case 22:

              this.$ = new VariableDeclaration($$[$0-1], $$[$0], null, _$[$0-1].first_line, _$[$0-1].first_column);
            
break;
case 23:

              this.$ = new Cast($$[$0-6], $$[$0-5], $$[$0], $$[$0-2] ,_$[$0-6].first_line, _$[$0-6].first_column);
            
break;
case 24:

              this.$ = new Vector(1, $$[$0-9],$$[$0-6],$$[$0-1],null, _$[$0-9].first_line, _$[$0-9].first_column);
            
break;
case 25:

              this.$ = new Vector(2, $$[$0-7],$$[$0-4],null,$$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column);
            
break;
case 26:

              this.$ = new List(1, $$[$0-8],$$[$0-6],null, _$[$0-10].first_line, _$[$0-10].first_column);
            
break;
case 27:

              this.$ = new List(2, $$[$0-7],$$[$0-5],$$[$0-1], _$[$0-9].first_line, _$[$0-9].first_column);
            
break;
case 28:

              this.$ = new Assigment($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
            
break;
case 29:

              this.$ = new ModifyVector($$[$0-5], $$[$0-3], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
            
break;
case 30:

              this.$ = new ModifyList($$[$0-7], $$[$0-4], $$[$0], _$[$0-7].first_line, _$[$0-7].first_column);
            
break;
case 31: case 48:
 this.$ = new Assigment($$[$0-1],new Arithmetic(new Identifier($$[$0-1],_$[$0-1].first_line, _$[$0-1].first_column),new Primitive(1, "INTEGER", _$[$0-1].first_line, _$[$0-1].first_column),false,_$[$0-1].first_line, _$[$0-1].first_column,"+"),_$[$0-1].first_line, _$[$0-1].first_column ); 
break;
case 32:
 this.$ = new Assigment($$[$0-1],new Arithmetic(new Identifier($$[$0-1],_$[$0-1].first_line, _$[$0-1].first_column),new Primitive(1, "INTEGER", _$[$0-1].first_line, _$[$0-1].first_column),false,_$[$0-1].first_line, _$[$0-1].first_column,"-"),_$[$0-1].first_line, _$[$0-1].first_column ); 
break;
case 33:
 this.$ = new Print($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 34:
 this.$ = new IF($$[$0-4],$$[$0-1],[],_$[$0-6].first_line, _$[$0-6].last_column);
break;
case 35:
 this.$ = new IF($$[$0-8],$$[$0-5],$$[$0-1],_$[$0-10].first_line, _$[$0-10].last_column);
break;
case 36:
 this.$ = new IF($$[$0-6],$$[$0-3],[$$[$0]],_$[$0-8].first_line, _$[$0-8].last_column);
break;
case 37:
 this.$ = new Switch($$[$0-4],$$[$0-1],null,_$[$0-6].first_line, _$[$0-6].last_column); 
break;
case 38:
 this.$ = new Switch($$[$0-5],$$[$0-2],$$[$0-1],_$[$0-7].first_line, _$[$0-7].last_column); 
break;
case 39:
 this.$ = new Switch($$[$0-4],[],$$[$0-1],_$[$0-6].first_line, _$[$0-6].last_column); 
break;
case 40:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 41:
 let arrCase = []; arrCase.push($$[$0]); this.$ = arrCase; 
break;
case 42:
 this.$ = new Case($$[$0-2],$$[$0],_$[$0-3].first_line, _$[$0-3].last_column); 
break;
case 43:
 this.$ = new Case(null,$$[$0],_$[$0-2].first_line, _$[$0-2].last_column); 
break;
case 44:
 this.$ = new For($$[$0-8],$$[$0-6],$$[$0-4],$$[$0-1],_$[$0-10].first_line, _$[$0-10].last_column); 
break;
case 45:
 this.$ = new VariableDeclaration($$[$0-3], $$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 46: case 50:
 this.$ = new Assigment($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 47:
 this.$ = null; 
break;
case 49:
 this.$ = new Assigment($$[$0-1],new Arithmetic(new Identifier($$[$0-1],_$[$0-1].first_line, _$[$0-1].first_column),new Primitive(1, "INTEGER", _$[$0-1].first_line, _$[$0-1].first_column),false,_$[$0-1].first_line, _$[$0-1].first_column,"-"),_$[$0-1].first_line, _$[$0-1].first_column );
break;
case 51:
 this.$ = new While($$[$0-4],$$[$0-1],_$[$0-6].first_line, _$[$0-6].last_column); 
break;
case 52:
 this.$ = new DoWhile($$[$0-6],$$[$0-2],_$[$0-8].first_line, _$[$0-8].last_column); 
break;
case 53:
 this.$ = new Function(2,$$[$0-7],$$[$0-6],$$[$0-4],false,$$[$0-1],_$[$0-7].first_line, _$[$0-7].last_column); 
break;
case 54:
 this.$ = new Function(2,$$[$0-6],$$[$0-5],[],false,$$[$0-1],_$[$0-6].first_line, _$[$0-6].last_column); 
break;
case 55:
 this.$ = new Function(3,$$[$0-7],$$[$0-6],$$[$0-4],true,$$[$0-1],_$[$0-7].first_line, _$[$0-7].last_column); 
break;
case 56:
 this.$ = new Function(3,$$[$0-6],$$[$0-5],[],true,$$[$0-1],_$[$0-6].first_line, _$[$0-6].last_column); 
break;
case 57:
this.$ = $$[$0-3]; this.$.push(new Symbol(6, $$[$0-1], $$[$0], null))
break;
case 58:
this.$ = []; this.$.push(new Symbol(6, $$[$0-1], $$[$0], null))
break;
case 59:
 this.$ = new Callback($$[$0-3],$$[$0-1],_$[$0-3].first_line, _$[$0-3].last_column); 
break;
case 60:
 this.$ = new Callback($$[$0-2],[],_$[$0-2].first_line, _$[$0-2].last_column); 
break;
case 61:
 this.$ = new AccessVector($$[$0-3],$$[$0-1],_$[$0-3].first_line, _$[$0-3].last_column); 
break;
case 62:
 this.$ = new AccessList($$[$0-5],$$[$0-2],_$[$0-5].first_line, _$[$0-5].last_column); 
break;
case 63:
 this.$ = new AddList($$[$0-5],$$[$0-1],_$[$0-5].first_line, _$[$0-5].last_column); 
break;
case 64:
this.$ = new ToLower($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column);
break;
case 65:
this.$ = new ToUpper($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column);
break;
case 66:
this.$ = new ToString($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column);
break;
case 67:
this.$ = new Truncate($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column);
break;
case 68:
this.$ = new Round($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column);
break;
case 69:
this.$ = new Typeof($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column);
break;
case 70:
this.$ = new Length($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column);
break;
case 71:

            this.$ = $$[$0-2];
            this.$.push($$[$0]);
           
break;
case 72:

            this.$ = [];
            this.$.push($$[$0]);
           
break;
case 73:
 this.$ = new Type("INTEGER");
break;
case 74:
 this.$ = new Type("DOUBLE");
break;
case 75:
 this.$ = new Type("BOOLEAN");
break;
case 76:
 this.$ = new Type("CHAR");
break;
case 77:
 this.$ = new Type("STRING");
break;
case 78:
 this.$ = new Main($$[$0],_$[$0-1].first_line, _$[$0-1].last_column); 
break;
case 79:
 this.$ = new Arithmetic($$[$0-2],$$[$0],false,_$[$0-2].first_line, _$[$0-2].first_column,"+"); 
break;
case 80:
 this.$ = new Arithmetic($$[$0-2],$$[$0],false,_$[$0-2].first_line, _$[$0-2].first_column,"-"); 
break;
case 81:
 this.$ = new Arithmetic($$[$0-2],$$[$0],false,_$[$0-2].first_line, _$[$0-2].first_column,"*"); 
break;
case 82:
 this.$ = new Arithmetic($$[$0-2],$$[$0],false,_$[$0-2].first_line, _$[$0-2].first_column,"/");
break;
case 83:
 this.$ = new Arithmetic($$[$0-2],$$[$0],false,_$[$0-2].first_line, _$[$0-2].first_column,"^"); 
break;
case 84:
 this.$ = new Arithmetic($$[$0-2],$$[$0],false,_$[$0-2].first_line, _$[$0-2].first_column,"%"); 
break;
case 85:
 this.$ = new Arithmetic($$[$0],null,true,_$[$0-1].first_line, _$[$0-1].first_column,"UNARY"); 
break;
case 88:
 this.$ = new Relational($$[$0-2],$$[$0],false,_$[$0-2].first_line, _$[$0-2].first_column,"=="); 
break;
case 89:
 this.$ = new Relational($$[$0-2],$$[$0],false,_$[$0-2].first_line, _$[$0-2].first_column,"!="); 
break;
case 90:
 this.$ = new Relational($$[$0-2],$$[$0],false,_$[$0-2].first_line, _$[$0-2].first_column,"<="); 
break;
case 91:
 this.$ = new Relational($$[$0-2],$$[$0],false,_$[$0-2].first_line, _$[$0-2].first_column,">="); 
break;
case 92:
 this.$ = new Relational($$[$0-2],$$[$0],false,_$[$0-2].first_line, _$[$0-2].first_column,"<"); 
break;
case 93:
 this.$ = new Relational($$[$0-2],$$[$0],false,_$[$0-2].first_line, _$[$0-2].first_column,">"); 
break;
case 94:
 this.$ = new Logic($$[$0-2],$$[$0],false,_$[$0-2].first_line, _$[$0-2].first_column,"&&"); 
break;
case 95:
 this.$ = new Logic($$[$0-2],$$[$0],false,_$[$0-2].first_line, _$[$0-2].first_column,"||"); 
break;
case 96:
 this.$ = new Logic($$[$0],null,true,_$[$0-1].first_line, _$[$0-1].first_column,"!"); 
break;
case 97:
 this.$ = new TernaryOperator($$[$0-4],$$[$0-2],$$[$0],_$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 99:
 this.$ = new Identifier($$[$0],_$[$0].first_line, _$[$0].first_column);
break;
case 100:
 this.$ = new Primitive(parseInt($$[$0]), "INTEGER", _$[$0].first_line, _$[$0].first_column);
break;
case 101:
 this.$ = new Primitive(parseFloat($$[$0]), "DOUBLE", _$[$0].first_line, _$[$0].first_column);
break;
case 102:
 this.$ = new Primitive($$[$0], "STRING", _$[$0].first_line, _$[$0].first_column);
break;
case 103:
 this.$ = new Primitive($$[$0], "CHAR", _$[$0].first_line, _$[$0].first_column);
break;
case 104:
 this.$ = new Primitive(true, "BOOLEAN", _$[$0].first_line, _$[$0].first_column);
break;
case 105:
 this.$ = new Primitive(false, "BOOLEAN", _$[$0].first_line, _$[$0].first_column);
break;
        }
    }
}


/* generated by ts-jison-lex 0.3.0 */
import { JisonLexer, JisonLexerApi } from '@ts-jison/lexer';
export class AnalyzerLexer extends JisonLexer implements JisonLexerApi {
    options: any = {"case-insensitive":true,"moduleName":"Analyzer"};
    constructor (yy = {}) {
        super(yy);
    }

    rules: RegExp[] = [/^(?:\s+)/i,/^(?:(\/\/).*)/i,/^(?:[ \r\t])/i,/^(?:\n)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:new\b)/i,/^(?:list\b)/i,/^(?:add\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:print\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:length\b)/i,/^(?:truncate\b)/i,/^(?:round\b)/i,/^(?:typeof\b)/i,/^(?:toString\b)/i,/^(?:toCharArray\b)/i,/^(?:main\b)/i,/^(?:void\b)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:\?)/i,/^(?::)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:=)/i,/^(?:\$)/i,/^(?:;)/i,/^(?:,)/i,/^(?:\.)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:([a-zA-ZÑñ]|(_[a-zA-ZÑñ]))([a-zA-ZÑñ]|[0-9]|_)*)/i,/^(?:'(?:(\\)["bfnrt/(\\)]|(\\)u[a-fA-F0-9]{4}|[^"(\\)])')/i,/^(?:((?:[0-9]|[1-9][0-9]+))((?:\.[0-9]+))\b)/i,/^(?:((?:[0-9]|[1-9][0-9]+))\b)/i,/^(?:"(?:[{cor1}|{cor2}]|["\\"]["bnrt/["\\"]|[^"["\\"])*")/i,/^(?:$)/i,/^(?:.)/i];
    conditions: any = {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73],"inclusive":true}}
    performAction (yy:any,yy_:any,$avoiding_name_collisions:any,YY_START:any): any {
          var YYSTATE=YY_START;
        switch($avoiding_name_collisions) {
    case 0:/* skip whitespace */
      break;
    case 1:/* line comment */
      break;
    case 2:/* white space */
      break;
    case 3:/* white space */
      break;
    case 4:/* multi comment */
      break;
    case 5: return 68; 
      break;
    case 6: return 69; 
      break;
    case 7: return 70; 
      break;
    case 8: return 71; 
      break;
    case 9: return 72; 
      break;
    case 10: return 92; 
      break;
    case 11: return 93; 
      break;
    case 12: return 31; 
      break;
    case 13: return 35; 
      break;
    case 14: return 60; 
      break;
    case 15: return 42; 
      break;
    case 16: return 43; 
      break;
    case 17: return 44; 
      break;
    case 18: return 48; 
      break;
    case 19: return 50; 
      break;
    case 20: return 54; 
      break;
    case 21: return 51; 
      break;
    case 22: return 55; 
      break;
    case 23: return 20; 
      break;
    case 24: return 21; 
      break;
    case 25: return 22; 
      break;
    case 26: return 41; 
      break;
    case 27: return 61; 
      break;
    case 28: return 62; 
      break;
    case 29: return 67; 
      break;
    case 30: return 64; 
      break;
    case 31: return 65; 
      break;
    case 32: return 66; 
      break;
    case 33: return 63; 
      break;
    case 34: return 38; 
      break;
    case 35: return 73; 
      break;
    case 36: return 57; 
      break;
    case 37:return 39;
      break;
    case 38:return 40;
      break;
    case 39:return 74;
      break;
    case 40:return 75;
      break;
    case 41:return 76;
      break;
    case 42:return 77;
      break;
    case 43:return 78;
      break;
    case 44:return 79;
      break;
    case 45:return 82;
      break;
    case 46:return 83;
      break;
    case 47:return 80;
      break;
    case 48:return 81;
      break;
    case 49:return 36;
      break;
    case 50:return 37;
      break;
    case 51:return 87;
      break;
    case 52:return 49;
      break;
    case 53:return 85;
      break;
    case 54:return 84;
      break;
    case 55:return 86;
      break;
    case 56:return 27;
      break;
    case 57:return 28;
      break;
    case 58:return 26;
      break;
    case 59:return '$';
      break;
    case 60:return 8;
      break;
    case 61:return 58;
      break;
    case 62:return 59;
      break;
    case 63:return 32;
      break;
    case 64:return 34;
      break;
    case 65:return 29;
      break;
    case 66:return 30;
      break;
    case 67:yy_.yytext = yy_.yytext.toLowerCase();          return 25;
      break;
    case 68:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);     return 91// substr to remove the quotes
      break;
    case 69:return 89
      break;
    case 70:return 88
      break;
    case 71:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);     return 90;
      break;
    case 72: return 5; 
      break;
    case 73:
                console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
                new Errors("Lexico", `El caracter ${yy_.yytext} no pertenece al lenguaje`, yy_.yylloc.first_line, yy_.yylloc.first_column);
                
      break;
        }
    }
}

